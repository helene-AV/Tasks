<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/runner/work/Tasks/Tasks/</path>
    <filename>README_8md</filename>
  </compound>
  <compound kind="file">
    <name>GenQPUtils.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/</path>
    <filename>GenQPUtils_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="yes" imported="no">Tasks/QPSolver.h</includes>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>void</type>
      <name>fillQC</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a19005ec649deff2408ae41bd0ac73972</anchor>
      <arglist>(const std::vector&lt; Task *&gt; &amp;tasks, int nrVars, Eigen::MatrixXd &amp;Q, Eigen::VectorXd &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceQC</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a6ad2cb7bd904212e5d9b6dcfaa989f94</anchor>
      <arglist>(const Eigen::MatrixXd &amp;QFull, const Eigen::VectorXd &amp;CFull, Eigen::MatrixXd &amp;Q, Eigen::VectorXd &amp;C, const Eigen::MatrixXd &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>aef4304bc755850350a21adc6250789a4</anchor>
      <arglist>(const std::vector&lt; Equality *&gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a75ff83cd1b1004838311866eda859393</anchor>
      <arglist>(const std::vector&lt; Inequality *&gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a0ebca234bbf747cb3780799a89d195fc</anchor>
      <arglist>(const std::vector&lt; GenInequality *&gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a1db07134f231c8aacf6c2bf2f401639d</anchor>
      <arglist>(const std::vector&lt; Equality *&gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a01ded3311635f6d7af39e15d1659f7b9</anchor>
      <arglist>(const std::vector&lt; Inequality *&gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a7d5e57614fe485d3e3c82d4edc26dbc0</anchor>
      <arglist>(const std::vector&lt; GenInequality *&gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBound</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a49a76dde5839eb89ded3ad069f46f38e</anchor>
      <arglist>(const std::vector&lt; Bound *&gt; &amp;bounds, Eigen::VectorXd &amp;XL, Eigen::VectorXd &amp;XU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceA</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>ac5c44bc95450bbbc88c5b1af5d3d851d</anchor>
      <arglist>(const Eigen::MatrixXd &amp;AFull, Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceBound</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a741de9b14e9fe6a5b4ec675703215210</anchor>
      <arglist>(const Eigen::VectorXd &amp;XLFull, Eigen::VectorXd &amp;XL, const Eigen::VectorXd &amp;XUFull, Eigen::VectorXd &amp;XU, const std::vector&lt; int &gt; &amp;fullToReduced, const std::vector&lt; int &gt; &amp;reducedToFull, const std::vector&lt; std::tuple&lt; int, int, double &gt;&gt; &amp;dependencies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandResult</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a9ce2d39b71ff7cc28fd53ce83444803f</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Eigen::VectorXd &amp;resultFull, const Eigen::MatrixXd &amp;multipliers)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a65d9ff284da05686474a0fb01276bbce</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, T *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a9694a15e3e5b744843aa6dae4fa134da</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Equality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>abda68512c902b700787e7eea478cd71a</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Inequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a92dd7d7ce7ea80e3cf096e82061d0b66</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, GenInequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>constrErrorMsg</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a35f47a0707e1b0bd512e16bcc7fdd235</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const Eigen::VectorXd &amp;result, int ALine, const std::vector&lt; T *&gt; &amp;constr, int &amp;start, int &amp;end, std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSSOLQPSolver.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/</path>
    <filename>LSSOLQPSolver_8h</filename>
    <includes id="GenQPSolver_8h" name="GenQPSolver.h" local="yes" imported="no">Tasks/GenQPSolver.h</includes>
    <class kind="class">tasks::qp::LSSOLQPSolver</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QLDQPSolver.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/</path>
    <filename>QLDQPSolver_8h</filename>
    <includes id="GenQPSolver_8h" name="GenQPSolver.h" local="yes" imported="no">Tasks/GenQPSolver.h</includes>
    <class kind="class">tasks::qp::QLDQPSolver</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>Bounds.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>Bounds_8h</filename>
    <class kind="struct">tasks::QBound</class>
    <class kind="struct">tasks::AlphaBound</class>
    <class kind="struct">tasks::AlphaDBound</class>
    <class kind="struct">tasks::AlphaDDBound</class>
    <class kind="struct">tasks::TorqueBound</class>
    <class kind="struct">tasks::TorqueDBound</class>
    <class kind="struct">tasks::PolyTorqueBound</class>
    <namespace>tasks</namespace>
  </compound>
  <compound kind="file">
    <name>GenQPSolver.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>GenQPSolver_8h</filename>
    <class kind="class">tasks::qp::GenQPSolver</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>TASKS_DLLAPI GenQPSolver *</type>
      <name>createQPSolver</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>aada2800b4fa88d085376a20b1105b87e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QPConstr.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPConstr_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <class kind="class">tasks::qp::JointLimitsConstr</class>
    <class kind="class">tasks::qp::DamperJointLimitsConstr</class>
    <class kind="class">tasks::qp::CollisionConstr</class>
    <class kind="class">tasks::qp::CoMIncPlaneConstr</class>
    <class kind="class">tasks::qp::GripperTorqueConstr</class>
    <class kind="class">tasks::qp::BoundedSpeedConstr</class>
    <class kind="class">tasks::qp::ImageConstr</class>
    <namespace>sch</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>TASKS_DLLAPI sch::Matrix4x4</type>
      <name>tosch</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a2887fd65f669f54a2aaaa911c724a089</anchor>
      <arglist>(const sva::PTransformd &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QPContactConstr.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPContactConstr_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <class kind="class">tasks::qp::ContactConstrCommon</class>
    <class kind="struct">tasks::qp::ContactConstrCommon::ContactCommon</class>
    <class kind="class">tasks::qp::ContactConstr</class>
    <class kind="struct">tasks::qp::ContactConstr::ContactSideData</class>
    <class kind="struct">tasks::qp::ContactConstr::ContactData</class>
    <class kind="class">tasks::qp::ContactAccConstr</class>
    <class kind="class">tasks::qp::ContactSpeedConstr</class>
    <class kind="class">tasks::qp::ContactPosConstr</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPContacts.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPContacts_8h</filename>
    <class kind="struct">tasks::qp::FrictionCone</class>
    <class kind="struct">tasks::qp::ContactId</class>
    <class kind="struct">tasks::qp::UnilateralContact</class>
    <class kind="struct">tasks::qp::BilateralContact</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPMotionConstr.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPMotionConstr_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <class kind="class">tasks::qp::PositiveLambda</class>
    <class kind="class">tasks::qp::MotionConstrCommon</class>
    <class kind="struct">tasks::qp::MotionConstrCommon::ContactData</class>
    <class kind="class">tasks::qp::MotionConstr</class>
    <class kind="struct">tasks::qp::SpringJoint</class>
    <class kind="class">tasks::qp::MotionSpringConstr</class>
    <class kind="struct">tasks::qp::MotionSpringConstr::SpringJointData</class>
    <class kind="class">tasks::qp::MotionPolyConstr</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPSolver_8h</filename>
    <includes id="QPContacts_8h" name="QPContacts.h" local="yes" imported="no">QPContacts.h</includes>
    <includes id="QPSolverData_8h" name="QPSolverData.h" local="yes" imported="no">QPSolverData.h</includes>
    <class kind="class">tasks::qp::QPSolver</class>
    <class kind="class">tasks::qp::Constraint</class>
    <class kind="class">tasks::qp::ConstraintFunction</class>
    <class kind="class">tasks::qp::Equality</class>
    <class kind="class">tasks::qp::Inequality</class>
    <class kind="class">tasks::qp::GenInequality</class>
    <class kind="class">tasks::qp::Bound</class>
    <class kind="class">tasks::qp::Task</class>
    <class kind="class">tasks::qp::HighLevelTask</class>
    <class kind="struct">tasks::qp::constr_traits</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Equality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Inequality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; GenInequality &gt;</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolverData.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPSolverData_8h</filename>
    <includes id="QPContacts_8h" name="QPContacts.h" local="yes" imported="no">QPContacts.h</includes>
    <class kind="class">tasks::qp::SolverData</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPTasks.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>QPTasks_8h</filename>
    <includes id="QPMotionConstr_8h" name="QPMotionConstr.h" local="yes" imported="no">QPMotionConstr.h</includes>
    <includes id="QPSolver_8h" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <includes id="Tasks_8h" name="Tasks.h" local="yes" imported="no">Tasks.h</includes>
    <class kind="class">tasks::qp::SetPointTaskCommon</class>
    <class kind="class">tasks::qp::SetPointTask</class>
    <class kind="class">tasks::qp::TrackingTask</class>
    <class kind="class">tasks::qp::TrajectoryTask</class>
    <class kind="class">tasks::qp::PIDTask</class>
    <class kind="class">tasks::qp::TargetObjectiveTask</class>
    <class kind="class">tasks::qp::JointsSelector</class>
    <class kind="struct">tasks::qp::JointsSelector::SelectedData</class>
    <class kind="struct">tasks::qp::JointStiffness</class>
    <class kind="struct">tasks::qp::JointGains</class>
    <class kind="class">tasks::qp::TorqueTask</class>
    <class kind="class">tasks::qp::PostureTask</class>
    <class kind="class">tasks::qp::PositionTask</class>
    <class kind="class">tasks::qp::OrientationTask</class>
    <class kind="class">tasks::qp::TransformTaskCommon</class>
    <class kind="class">tasks::qp::SurfaceTransformTask</class>
    <class kind="class">tasks::qp::TransformTask</class>
    <class kind="class">tasks::qp::SurfaceOrientationTask</class>
    <class kind="class">tasks::qp::GazeTask</class>
    <class kind="class">tasks::qp::PositionBasedVisServoTask</class>
    <class kind="class">tasks::qp::CoMTask</class>
    <class kind="class">tasks::qp::MultiCoMTask</class>
    <class kind="class">tasks::qp::MultiRobotTransformTask</class>
    <class kind="class">tasks::qp::MomentumTask</class>
    <class kind="class">tasks::qp::ContactTask</class>
    <class kind="class">tasks::qp::GripperTorqueTask</class>
    <class kind="class">tasks::qp::LinVelocityTask</class>
    <class kind="class">tasks::qp::OrientationTrackingTask</class>
    <class kind="class">tasks::qp::RelativeDistTask</class>
    <class kind="class">tasks::qp::VectorOrientationTask</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>Tasks.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/Tasks/</path>
    <filename>Tasks_8h</filename>
    <class kind="class">tasks::PositionTask</class>
    <class kind="class">tasks::OrientationTask</class>
    <class kind="class">tasks::TransformTaskCommon</class>
    <class kind="class">tasks::SurfaceTransformTask</class>
    <class kind="class">tasks::TransformTask</class>
    <class kind="class">tasks::MultiRobotTransformTask</class>
    <class kind="class">tasks::SurfaceOrientationTask</class>
    <class kind="class">tasks::GazeTask</class>
    <class kind="class">tasks::PositionBasedVisServoTask</class>
    <class kind="class">tasks::PostureTask</class>
    <class kind="class">tasks::CoMTask</class>
    <class kind="class">tasks::MultiCoMTask</class>
    <class kind="class">tasks::MomentumTask</class>
    <class kind="class">tasks::LinVelocityTask</class>
    <class kind="class">tasks::OrientationTrackingTask</class>
    <class kind="class">tasks::RelativeDistTask</class>
    <class kind="class">tasks::VectorOrientationTask</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <path>/home/runner/work/Tasks/Tasks/src/</path>
    <filename>utils_8h</filename>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>int</type>
      <name>findJointFromVector</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>ac4a39f2423f38a93bb34cd5d0dba891c</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, int line, bool withBase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareDof</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a9d2ad288554eb8df94fadd7bfc77009d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb1, const rbd::MultiBody &amp;mb2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::AlphaBound</name>
    <filename>structtasks_1_1AlphaBound.html</filename>
    <member kind="function">
      <type></type>
      <name>AlphaBound</name>
      <anchorfile>structtasks_1_1AlphaBound.html</anchorfile>
      <anchor>a5810daa83803edea5dfe2778e2fbca06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlphaBound</name>
      <anchorfile>structtasks_1_1AlphaBound.html</anchorfile>
      <anchor>ae0e37a2fff651a7fca0f817c57b8d98f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lAB, std::vector&lt; std::vector&lt; double &gt;&gt; uAB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lAlphaBound</name>
      <anchorfile>structtasks_1_1AlphaBound.html</anchorfile>
      <anchor>a47628045f7248f1147c17f17fa16d554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uAlphaBound</name>
      <anchorfile>structtasks_1_1AlphaBound.html</anchorfile>
      <anchor>adfb664f324979f6c87525b6442061b7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::AlphaDBound</name>
    <filename>structtasks_1_1AlphaDBound.html</filename>
    <member kind="function">
      <type></type>
      <name>AlphaDBound</name>
      <anchorfile>structtasks_1_1AlphaDBound.html</anchorfile>
      <anchor>aeb78b98717f3b297af3dc569331999f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlphaDBound</name>
      <anchorfile>structtasks_1_1AlphaDBound.html</anchorfile>
      <anchor>a7c5f62454ec30fee360ebf3f37518a63</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lADB, std::vector&lt; std::vector&lt; double &gt;&gt; uADB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lAlphaDBound</name>
      <anchorfile>structtasks_1_1AlphaDBound.html</anchorfile>
      <anchor>a6f9a9d17cbba1eda740b9ea8dd204ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uAlphaDBound</name>
      <anchorfile>structtasks_1_1AlphaDBound.html</anchorfile>
      <anchor>a4ed2cae72c57cae6df03f356f4a6d64b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::AlphaDDBound</name>
    <filename>structtasks_1_1AlphaDDBound.html</filename>
    <member kind="function">
      <type></type>
      <name>AlphaDDBound</name>
      <anchorfile>structtasks_1_1AlphaDDBound.html</anchorfile>
      <anchor>a0bff9c0eb5e0c9d681b04bc30ade1284</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlphaDDBound</name>
      <anchorfile>structtasks_1_1AlphaDDBound.html</anchorfile>
      <anchor>af57dc81a8fe0670af76bf8fa2fb23c16</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lADDB, std::vector&lt; std::vector&lt; double &gt;&gt; uADDB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lAlphaDDBound</name>
      <anchorfile>structtasks_1_1AlphaDDBound.html</anchorfile>
      <anchor>a6ef5fac8241704067bbd36d824da6889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uAlphaDDBound</name>
      <anchorfile>structtasks_1_1AlphaDDBound.html</anchorfile>
      <anchor>a113410978f916b9c795c6b4c4149231f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::BilateralContact</name>
    <filename>structtasks_1_1qp_1_1BilateralContact.html</filename>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a9cfc6f3d62925ea67cf4a2e25728f6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a263ac7d857ffad2213ba250dcd76e7c9</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, std::vector&lt; Eigen::Vector3d &gt; r1Points, const std::vector&lt; Eigen::Matrix3d &gt; &amp;r1Frames, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>abba7b029ab9aba37ca2f45a12438d839</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, int ambId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const std::vector&lt; Eigen::Matrix3d &gt; &amp;r1Frames, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a81df6ab75193f9ab40d139b032afb1ac</anchor>
      <arglist>(const ContactId &amp;cId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const std::vector&lt; Eigen::Matrix3d &gt; &amp;r1Frames, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>acdfe3e8f299cd16fcca9d8f2e1b5ff15</anchor>
      <arglist>(const UnilateralContact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a9d29e059f7953f2b4eecb74c475f8205</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int point, const std::vector&lt; FrictionCone &gt; &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>aeef09cf4f0e61291df54bf1e4dcb7a52</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; FrictionCone &gt; &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>force</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a6268f5127138a4ab954b13e63751b6ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const std::vector&lt; FrictionCone &gt; &amp;c_pi_b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>aeeb80c2c4a0ca4ec0eac1e905627b5c7</anchor>
      <arglist>(int point) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a8ab0a0f6eaf2f4ddd872c28d7b66b671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>afbcf0858990ffa9d118881e65cb27e00</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int point, const std::vector&lt; FrictionCone &gt; &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>ad396b97cafd81a9f504ca75aeaf41b5e</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; FrictionCone &gt; &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sForce</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>ab02ea7c942fbdb7e047235cf5c6d2669</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const std::vector&lt; FrictionCone &gt; &amp;c_pi_b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sNrLambda</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a37214716bff475b2a091859b70a2c3d1</anchor>
      <arglist>(int point) const</arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>contactId</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a332d3c0c5db19b3ea3d7f3e12a903364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r1Points</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>aaa53327f1e4010109daaca0472cdfa87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r2Points</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a8e70de174d9453af6728a12bd194c163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FrictionCone &gt;</type>
      <name>r1Cones</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a0820756bc6d3dfec5acba3d29bb09ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FrictionCone &gt;</type>
      <name>r2Cones</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>a87ac911696ce421a9ba1f83b98785986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>aea4bdb13ab0da1cbc451e8b752f5efb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>structtasks_1_1qp_1_1BilateralContact.html</anchorfile>
      <anchor>ae34273f6228a00ce4b185c83f1b233b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Bound</name>
    <filename>classtasks_1_1qp_1_1Bound.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bound</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>abb2191b36aa4861bbcc8b11d5f0981fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>a33f4adaf796f3bf03434c17180964471</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>ab08d340c6b7f5dd7307364107d74d9e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>a746cb55b47bdd05c2340322775b24b00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>a50430e962bb811543e95d3a370bf8765</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>a96f8c46c1d310d925bb60f42e7832211</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>a19d04f6b7e27be0083f199820b25f85a</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1Bound.html</anchorfile>
      <anchor>aff1b28131a0e28f0b6396b084128858c</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::BoundedSpeedConstr</name>
    <filename>classtasks_1_1qp_1_1BoundedSpeedConstr.html</filename>
    <base>ConstraintFunction&lt; GenInequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>BoundedSpeedConstr</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a9e2c07951b0339b0dca31e7dfc65282e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a7743272ac4add00739a1f9f5ecb7f305</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a3c1bded8210ad455e89a24a0ab1da223</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;lowerSpeed, const Eigen::VectorXd &amp;upperSpeed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeBoundedSpeed</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>aef0f41ce8156689fe319357df8b8a467</anchor>
      <arglist>(const std::string &amp;bodyName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBoundedSpeeds</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a10746908e9ca63745fd2e03660e876f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrBoundedSpeeds</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a3f88a092a9c70564d129b22a6b0305b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundedSpeeds</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a6cd62f18bdb9f5c4dbb747a37b9de443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a0f7f98fca4b36a6c87b724fb598698b0</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>aa85fbe1d319ff21386fc106b2979e621</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>aa40bc13e95421a11c0afb2eb542fe0bc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>ad0f08a24c117a7d4674996723b21124b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>afae4904e014ff1f9f341727bccdae0da</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a39658f71e82022d9c4396f2cbd2ecc40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>LowerGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a101bd01faf9121c0eb049ceb635f0d2a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>UpperGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>adf303d1dc34ec27ba05365cf75c23b0d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::CollisionConstr</name>
    <filename>classtasks_1_1qp_1_1CollisionConstr.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>CollisionConstr</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a6cbd77cac9be76d2b470ede58f805e6e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollision</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a965900ecf498d92673d64796558b9857</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int collId, int r1Index, const std::string &amp;r1BodyName, sch::S_Object *body1, const sva::PTransformd &amp;X_op1_o1, int r2Index, const std::string &amp;r2BodyName, sch::S_Object *body2, const sva::PTransformd &amp;X_op2_o2, double di, double ds, double damping, double dampingOff=0., const Eigen::VectorXd &amp;r1Selector=Eigen::VectorXd::Zero(0), const Eigen::VectorXd &amp;r2Selector=Eigen::VectorXd::Zero(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rmCollision</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a378178fcd1de3da1e6a0472c0f04f42e</anchor>
      <arglist>(int collId)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrCollisions</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a341e8e4c203491bd1798956615736350</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a851836fff090ddb145583d0945be3d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrCollisions</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a0f5c6818508abc7debd6f6d1673d7ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>ad0c21cf42a3f36765645661d7ee32ddc</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>aad283323a7817f32ba5983d0b58454dd</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a77878f9a210e267e78f458e69a39596f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a20297f19f57623cee1ed62c8dfe43263</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a1078021e3573239e2cae6700133fbea8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>aa1fc9dd4ff261477926ef22d8415db65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a33371ff73cdc9160464bf037940ca5de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>a156d042206e1e319c9d4bb7dbfea0707</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const CollData &amp;</type>
      <name>getCollisionData</name>
      <anchorfile>classtasks_1_1qp_1_1CollisionConstr.html</anchorfile>
      <anchor>ac30ce96876746aeaed647263062248d3</anchor>
      <arglist>(int collId) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::CoMIncPlaneConstr</name>
    <filename>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>CoMIncPlaneConstr</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a8d06d7750347b3548de72faae5394406</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlane</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>ab4ff9ded4f0e0fcbbaf64bb7a9fc9d0a</anchor>
      <arglist>(int planeId, const Eigen::Vector3d &amp;normal, double offset, double di, double ds, double damping, double dampingOff=0.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlane</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a842c6c78a0ebbc92999997d2cb74ebae</anchor>
      <arglist>(int planeId, const Eigen::Vector3d &amp;normal, double offset, double di, double ds, double damping, const Eigen::Vector3d &amp;speed, const Eigen::Vector3d &amp;normalDot, double dampingOff=0.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rmPlane</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>ac6a9eb3a427aefd92dde43a9cad9f2af</anchor>
      <arglist>(int planeId)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrPlanes</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>aa76fb574e8bab05a837920cadd968306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>aa28f3741c6fb07f9c5d95967209bebb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrPlanes</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>ad425d494b96f1aeaa34d3380ce8618df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a9ea58938e66c71938ee2837293441da8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a1110af78967fdbf83c6ad56c4ae99280</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>ad378d1cf2a235830720b8fefaba79fca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a33875a675a759a588497158c1a3ee1d3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a4580e432d38a64f56abcfb32e6e7b264</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a2d7ceb3f7eaae8cbce850255c521579a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a0a0d3bc6d47d20a4f8721dd973f6276d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>classtasks_1_1qp_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a71a8e9ef2b63d24f0f210799fe22e5b2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::CoMTask</name>
    <filename>classtasks_1_1qp_1_1CoMTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a405b0a71a500f45461809a6a834ce4ef</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a6639488dffbba63388705c3909f1e31b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const Eigen::Vector3d &amp;com, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::CoMTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a6ef18cded54fee2dc7337160a10f0c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a01fd2792379cee017ed2a4091c3b8fe5</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a3e8da9aacc475dee74bc71dc27beceda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a48d27c21404ec3b82bded054c653d4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>ab0ab49b7c66a39613e1765c13b841ddf</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>acf39ba9f4426acdd6dfc1fd7a9be4820</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a57b452d399ec19cc3bc7c0d8a75b8a3d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a40075f81c1878b39eda8635ba3aefc02</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>a2695792e57f01a7b2a80de82f0393178</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>ae23e5029a879d3e9ce5bc1ea904e5ae1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1CoMTask.html</anchorfile>
      <anchor>ace13e0886113907ce79dd1f57356b403</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::CoMTask</name>
    <filename>classtasks_1_1CoMTask.html</filename>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>ad4b7c8e51cc745de698e3d6bd2a2339e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>aecc4822eec67f013d9a8db414f019acb</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const Eigen::Vector3d &amp;com, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>abad06b1bf9cabf9863797b740c99d4d6</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a6e25e21cf8a60067e596fc4905643ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a1abd40129f8991fd4f5686fb45e3e8c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a68c6af543ca48f350185a2ea2b8062e3</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a7f91a91ff834b70bdb04960ad215fabb</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a289f61cc6113eeb7b8db231312f3872e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>afe3cc241625aad1536805f62c0e6aa76</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>ae2b3c066b20e8fb0ca86c22da5963ea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a9b6e8fa94f3ddf119dd5fe52247ddfa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a42ca3d08dc10de23fb2c7d18e3043a42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>ab000f59398f9b8925b0fda45bbaa8ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1CoMTask.html</anchorfile>
      <anchor>a1ff73516dd579444bf719ac662562e54</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits</name>
    <filename>structtasks_1_1qp_1_1constr__traits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits&lt; Equality &gt;</name>
    <filename>structtasks_1_1qp_1_1constr__traits_3_01Equality_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxLines</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Equality_01_4.html</anchorfile>
      <anchor>a1eea3c95ba23ce37db1faeb5af34677b</anchor>
      <arglist>(const Equality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrLines</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Equality_01_4.html</anchorfile>
      <anchor>a36380c882892eaf391510a7f5824b69f</anchor>
      <arglist>(const Equality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Equality_01_4.html</anchorfile>
      <anchor>a03a20222632a0ba476c07807de9aa1e9</anchor>
      <arglist>(const Equality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>desc</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Equality_01_4.html</anchorfile>
      <anchor>ab01de7dfb3bdce7a14c6dea9273dd149</anchor>
      <arglist>(Equality *constr, const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits&lt; GenInequality &gt;</name>
    <filename>structtasks_1_1qp_1_1constr__traits_3_01GenInequality_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxLines</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01GenInequality_01_4.html</anchorfile>
      <anchor>ab8952085364f79663c7f4ff4cee717e1</anchor>
      <arglist>(const GenInequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrLines</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01GenInequality_01_4.html</anchorfile>
      <anchor>abbd8f0aeeb0557ecc7e9da467a0bff55</anchor>
      <arglist>(const GenInequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01GenInequality_01_4.html</anchorfile>
      <anchor>a2dd694ea42f2356e22a4c2283ce829b0</anchor>
      <arglist>(const GenInequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>desc</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01GenInequality_01_4.html</anchorfile>
      <anchor>a018ab4e248a49fb23efd8e8b6899baec</anchor>
      <arglist>(GenInequality *constr, const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits&lt; Inequality &gt;</name>
    <filename>structtasks_1_1qp_1_1constr__traits_3_01Inequality_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxLines</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Inequality_01_4.html</anchorfile>
      <anchor>a5139859fb109800ff919d1d3fd820170</anchor>
      <arglist>(const Inequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrLines</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Inequality_01_4.html</anchorfile>
      <anchor>a3f3e45c0bc6602f14b42581e67cd1ae3</anchor>
      <arglist>(const Inequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Inequality_01_4.html</anchorfile>
      <anchor>a73b01543c02f1856d9435897337e38de</anchor>
      <arglist>(const Inequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>desc</name>
      <anchorfile>structtasks_1_1qp_1_1constr__traits_3_01Inequality_01_4.html</anchorfile>
      <anchor>abb43b3d4896366aa9a8251f48336dab9</anchor>
      <arglist>(Inequality *constr, const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Constraint</name>
    <filename>classtasks_1_1qp_1_1Constraint.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>classtasks_1_1qp_1_1Constraint.html</anchorfile>
      <anchor>ab0a2de8684c5cb2901578a345ec0c162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1Constraint.html</anchorfile>
      <anchor>a1d20144cd73582d7f597f4806bfdc132</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;msb, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1Constraint.html</anchorfile>
      <anchor>acaa7ba68e4d9fcbf627c048aef01dc43</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ConstraintFunction</name>
    <filename>classtasks_1_1qp_1_1ConstraintFunction.html</filename>
    <templarg>Fun</templarg>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>ad668fbb366458056c27a466578c26b94</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; Bound &gt;</name>
    <filename>classtasks_1_1qp_1_1ConstraintFunction.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>ad668fbb366458056c27a466578c26b94</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; Equality &gt;</name>
    <filename>classtasks_1_1qp_1_1ConstraintFunction.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>ad668fbb366458056c27a466578c26b94</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; GenInequality &gt;</name>
    <filename>classtasks_1_1qp_1_1ConstraintFunction.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>ad668fbb366458056c27a466578c26b94</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; Inequality &gt;</name>
    <filename>classtasks_1_1qp_1_1ConstraintFunction.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>ad668fbb366458056c27a466578c26b94</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1ConstraintFunction.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactAccConstr</name>
    <filename>classtasks_1_1qp_1_1ContactAccConstr.html</filename>
    <base>tasks::qp::ContactConstr</base>
    <member kind="function">
      <type></type>
      <name>ContactAccConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ContactAccConstr.html</anchorfile>
      <anchor>a8a06c411889b12ea13c7434ee8a6dfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1ContactAccConstr.html</anchorfile>
      <anchor>a998ceb1758f59060e35f79645d768081</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactAccConstr.html</anchorfile>
      <anchor>a86ccff21c29b0282eed183c8e2376858</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactConstrCommon::ContactCommon</name>
    <filename>structtasks_1_1qp_1_1ContactConstrCommon_1_1ContactCommon.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstrCommon_1_1ContactCommon.html</anchorfile>
      <anchor>a9abf799bf7ac9481ecf19629037544b6</anchor>
      <arglist>(const ContactCommon &amp;cc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstrCommon_1_1ContactCommon.html</anchorfile>
      <anchor>a9d6f13c3ddaa22250956730d2140705c</anchor>
      <arglist>(const ContactCommon &amp;cc) const</arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>cId</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstrCommon_1_1ContactCommon.html</anchorfile>
      <anchor>ad53d259f4e7a95dfb4ac949bf30488dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstrCommon_1_1ContactCommon.html</anchorfile>
      <anchor>a7486abed0e3e28e648c2e2d91b280c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstrCommon_1_1ContactCommon.html</anchorfile>
      <anchor>a3fdbc4c04005859afe2c6f77a4cec997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactConstr</name>
    <filename>classtasks_1_1qp_1_1ContactConstr.html</filename>
    <base>ConstraintFunction&lt; Equality &gt;</base>
    <base>tasks::qp::ContactConstrCommon</base>
    <class kind="struct">tasks::qp::ContactConstr::ContactData</class>
    <class kind="struct">tasks::qp::ContactConstr::ContactSideData</class>
    <member kind="function">
      <type></type>
      <name>ContactConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a75afc5afe626485023d9fd8a009b0bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDofContacts</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>af0d84076bf6065d360bf5c6fe25f19d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a352528abbb9c6e56277ce59762644268</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a084e1eeb7e588a9b4d968b0299e29ce3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a1bc44ea678ad94c18a47587852ce2987</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a491e3acbe2262d55e63abecad70e6522</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a4d41e244d51f984e4e454b034ad99b78</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a393cf3b258142e929dfe0b9c05431a81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>ab48ef13bdf935a36c4561e39340adc20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactData &gt;</type>
      <name>cont_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a462e49a9b481e139b98cd4e9749cd6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJac_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>abeee7362aae0d198aff26ac2b52f0dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>dofJac_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>a942694b22e0994fb66534f3bc2209d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>A_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>ade743f34680958185eff28e9a982b7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>b_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>aa375b908543d69711b1dd45ece31a865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrEq_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>ac4cc65374a5649c54fade59e4a60de09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalAlphaD_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>aef4970931649dddbf92ec649e44ebd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeStep_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstr.html</anchorfile>
      <anchor>ae9e38fabd9625b3cbe4b592630cf3250</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactConstrCommon</name>
    <filename>classtasks_1_1qp_1_1ContactConstrCommon.html</filename>
    <class kind="struct">tasks::qp::ContactConstrCommon::ContactCommon</class>
    <member kind="function">
      <type>bool</type>
      <name>addVirtualContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>a7c55dda527a78e05b4831360910bfd14</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeVirtualContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>aedef34aeec93e2935de172e1cea9b522</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetVirtualContacts</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>a838f717847de788786039ae40d99939c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addDofContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>ac5123de1300b7ecb492a82bdf4ff598a</anchor>
      <arglist>(const ContactId &amp;contactId, const Eigen::MatrixXd &amp;dof)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeDofContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>a31ac823a2b09a9e5da7a4b825f8377eb</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDoFContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>aa93d683ced4759b37ed2e766bd2df197</anchor>
      <arglist>(const ContactId &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>dofContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>ae293d49baf668bf9d66c26d64f33e847</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDofContacts</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>adecc38cbf40aa9b7b4ef2d91197bf816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::set&lt; ContactCommon &gt;</type>
      <name>contactCommonInContact</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>a9ef854ece354fa70691e835d4b1b113f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; ContactId &gt;</type>
      <name>virtualContacts_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>a2f2a4442ff0cbee3b172ffbf89eb7ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; ContactId, Eigen::MatrixXd &gt;</type>
      <name>dofContacts_</name>
      <anchorfile>classtasks_1_1qp_1_1ContactConstrCommon.html</anchorfile>
      <anchor>aff630a43bf34b2a1888d3935934eadd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::MotionConstrCommon::ContactData</name>
    <filename>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactData</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>af86854939284b75c42d49cb3d55f080c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactData</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>ac29543610a2c5ffa91e625ee7eb61cd4</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, int lambdaBegin, std::vector&lt; Eigen::Vector3d &gt; points, const std::vector&lt; FrictionCone &gt; &amp;cones)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bodyIndex</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>abd85910b4e703019994cc83af67770ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lambdaBegin</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>a5fe6588a69311d8d5503c6d9be453745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>ac649c8ba8ad31888ad6f95d3c2720793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>points</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>a9ac2def7191a2deae13dec4b80fcdfbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt; &gt;</type>
      <name>minusGenerators</name>
      <anchorfile>structtasks_1_1qp_1_1MotionConstrCommon_1_1ContactData.html</anchorfile>
      <anchor>aa9db81d279ff9dcfc93c849301597ca8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactConstr::ContactData</name>
    <filename>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactData</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a90801e448573ba36d10a5eb230111896</anchor>
      <arglist>(std::vector&lt; ContactSideData &gt; csds, const Eigen::MatrixXd &amp;d, int r1, int r2, int b1, int b2, const sva::PTransformd &amp;X_bb, const sva::PTransformd &amp;X_bcf, const ContactId &amp;cId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>ace2230dda7998dae13a6d67f51afc185</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ContactSideData &gt;</type>
      <name>contacts</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a8eaacc04f628b6ef37f84e711153da3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>dof</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a4d025b4a9ad0dc05a96b571d42fedb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>revDof</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>ad29c82f825db591831606fc41d48b399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r1Index</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a36664bc33d3df6f48bff1cca3172188b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r2Index</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a45d95d03f77de846582a64cdb1f4d888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1Index</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a060e74dde561d3e2b2b744c7e413b4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2Index</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a5b7a1d42371e09c6453d6fc09b29a395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>afa20a55cc3a2d0ee4726aea8d0e20af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>aec6ce54631e347b5845b6bb24cc206a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>contactId</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactData.html</anchorfile>
      <anchor>a73463d49bc2a0f6e8e08b17c465278d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactId</name>
    <filename>structtasks_1_1qp_1_1ContactId.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactId</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>aa7e0d2976319c9a3c7600c18d322090b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactId</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>a83b93d52de3ea6d4d0d4b370f126ae50</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>a407e8badcde5e4de651c13c0250a2074</anchor>
      <arglist>(const ContactId &amp;cId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>ac30d29fdaba7efe644ed05f0e1b930a4</anchor>
      <arglist>(const ContactId &amp;cId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>a0b1557e17d72da52a782a1e2494495d0</anchor>
      <arglist>(const ContactId &amp;cId) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r1Index</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>aa0f853c4f1786b8a23a0252dcbf2678a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r2Index</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>a58515743f8024e51dc07e65a3f0447d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1BodyName</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>a47acc85ec19a848ec185d379dbd7c9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2BodyName</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>aec152e04a89289523099fd8ebe816e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ambiguityId</name>
      <anchorfile>structtasks_1_1qp_1_1ContactId.html</anchorfile>
      <anchor>a7777bc784fa6025d8f024e89f01193ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactPosConstr</name>
    <filename>classtasks_1_1qp_1_1ContactPosConstr.html</filename>
    <base>tasks::qp::ContactConstr</base>
    <member kind="function">
      <type></type>
      <name>ContactPosConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ContactPosConstr.html</anchorfile>
      <anchor>a0dd6dd620e5f1189e9f013df23e87a20</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1ContactPosConstr.html</anchorfile>
      <anchor>aad4a67abd934dafb56469538cf7ab3ea</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactPosConstr.html</anchorfile>
      <anchor>a4bdac430931c5b3438578b0fa3072dc3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactConstr::ContactSideData</name>
    <filename>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactSideData</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>a3663b30e14d97d6988a460c476227bf2</anchor>
      <arglist>(int rI, int aDB, double s, const rbd::Jacobian &amp;j, const sva::PTransformd &amp;Xbp)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>robotIndex</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>ab8b5fe032fa924722e9e9936033ac11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>alphaDBegin</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>a27973de260230b1e17d787f4b6e7a9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bodyIndex</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>a74063f68fc100833abeafd911ffaae50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sign</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>a9a1118815c57748be2b8695e29635743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>a75766cd05463f9bea05b7bc5cbc44cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b_p</name>
      <anchorfile>structtasks_1_1qp_1_1ContactConstr_1_1ContactSideData.html</anchorfile>
      <anchor>ac0b9f181c4ccd6109ed924ba9f69af4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactSpeedConstr</name>
    <filename>classtasks_1_1qp_1_1ContactSpeedConstr.html</filename>
    <base>tasks::qp::ContactConstr</base>
    <member kind="function">
      <type></type>
      <name>ContactSpeedConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ContactSpeedConstr.html</anchorfile>
      <anchor>aa3baa9f28a7458f7994dc736d7304ccb</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1ContactSpeedConstr.html</anchorfile>
      <anchor>a5efaf89905603ee2579a909bc1b6f215</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>classtasks_1_1qp_1_1ContactSpeedConstr.html</anchorfile>
      <anchor>a51ed201dd6eed598296a3e7cf0590b3e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactTask</name>
    <filename>classtasks_1_1qp_1_1ContactTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>ContactTask</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>a037148c6db1475dc6f36c42bc9e6317c</anchor>
      <arglist>(ContactId contactId, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>aa57e803ab81c62fab4daaa6d2ec22493</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>aad6d0b80121acdc77a7e5551eebeb92b</anchor>
      <arglist>(const Eigen::Vector3d &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorD</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>a714afedfd93d1be2fc4baae72112b70e</anchor>
      <arglist>(const Eigen::Vector3d &amp;errorD)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>a68bb42fab80a9d00569910598ee9fcfc</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>a90577acb68343fca1a43f2a04efb0297</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>ae93808af2c2663ca31ae8f2f3c4cd984</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1ContactTask.html</anchorfile>
      <anchor>aa54ad1c8b418fc61d454f3fee15be9ab</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::DamperJointLimitsConstr</name>
    <filename>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>DamperJointLimitsConstr</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>ab0e3959cb5a9a6e07fce811e23ec308d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const QBound &amp;qBound, const AlphaBound &amp;aBound, double interPercent, double securityPercent, double damperOffset, double step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DamperJointLimitsConstr</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a9a1e6d1eb5007d7379683461bcf36713</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const QBound &amp;qBound, const AlphaBound &amp;aBound, const AlphaDBound &amp;aDBound, double interPercent, double securityPercent, double damperOffset, double step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DamperJointLimitsConstr</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a26c9eca6bae44f7610e4f4c018c4f080</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const QBound &amp;qBound, const AlphaBound &amp;aBound, const AlphaDBound &amp;aDBound, const AlphaDDBound &amp;aDDBound, double interPercent, double securityPercent, double damperOffset, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>aa6a111694fc46b4f2f19418975ca7fa1</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a1d0a2b753ffc9366583f4b86ce909ab5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a8d8484d2714ccb8e01d662f750b8dd78</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a66f98c62838d0b2f4a9812435eb0eda4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>ac82451fdc69c6b8420e3c65556cedfd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a868e385aa1e4cbfaee41e6705177c7fb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a810c48602c6b10a59e91a58d8cf7b0cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeDamping</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a2a14b03bb1f27d332e2cb7b1c3c3d085</anchor>
      <arglist>(double alpha, double dist, double iDist, double sDist)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeDamper</name>
      <anchorfile>classtasks_1_1qp_1_1DamperJointLimitsConstr.html</anchorfile>
      <anchor>a32a63d6ca7eb4d04fba359574ec5bb73</anchor>
      <arglist>(double dist, double iDist, double sDist, double damping)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Equality</name>
    <filename>classtasks_1_1qp_1_1Equality.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Equality</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>a3989011420947815653a39839aa306d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxEq</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>a16167f0876c15eea964a2444e7174f5a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrEq</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>a84855824da0e3333ea1655b643df6f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>ae8a5859b8789be2ab522d2e9aa32ec20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bEq</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>ada49ed453361019ecb1b22dfe48d4ae3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>a89a44401b4eda6d61119a9c10ddc8f15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descEq</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>a3a8b70096b0c432643b828bbdf39d536</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>a9b875aff84a6d42b7c56260af6da0541</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1Equality.html</anchorfile>
      <anchor>ae79bc2e4b409d910f70028a44a0d776c</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::FrictionCone</name>
    <filename>structtasks_1_1qp_1_1FrictionCone.html</filename>
    <member kind="function">
      <type></type>
      <name>FrictionCone</name>
      <anchorfile>structtasks_1_1qp_1_1FrictionCone.html</anchorfile>
      <anchor>a6f26952821a8a90a13706f60fcde3678</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrictionCone</name>
      <anchorfile>structtasks_1_1qp_1_1FrictionCone.html</anchorfile>
      <anchor>ad5e1ee09db9cad55aaa5e81f827724dd</anchor>
      <arglist>(const Eigen::Matrix3d &amp;frame, int nrGen, double mu, double direction=1.)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>generators</name>
      <anchorfile>structtasks_1_1qp_1_1FrictionCone.html</anchorfile>
      <anchor>a21e18e3e28defbb740615260a07489c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GazeTask</name>
    <filename>classtasks_1_1qp_1_1GazeTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a37c7e3e10fc054e0435dc7656c141565</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector2d &amp;point2d, double depthEstimate, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a538a7e6844f23921d4649f5169d8a4da</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;point3d, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::GazeTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>ae619a255082dbbb29eae5c8155751564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a66de6c7e95ddb0d5779460fc740dc09a</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>ac08fc99e6870186c4c5a745294051563</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a64684b045a4e6b90247a33f40370e14c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a9fd82b2acc7b7ed48635e4a6b5c9ef56</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>ae91ea95a689dfca2376d28c13ddaa7e5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a954aeee3aeb66a7dca605dc6962dad26</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>ab603baab4277aaa3d99a26790792f1f7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1GazeTask.html</anchorfile>
      <anchor>a7e6b18a52ecce63f0bcd92b474249f98</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::GazeTask</name>
    <filename>classtasks_1_1GazeTask.html</filename>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>aba1bfe65a758ea66b3861eb8f165c160</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector2d &amp;point2d, double depthEstimate, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a12599ce7b03170f7b9d33e521cfc417d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;point3d, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a87332fab30a87c03822bf31efcda8aeb</anchor>
      <arglist>(const GazeTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a3c9dfcd5e71d7af7f8d94476fbe9bb72</anchor>
      <arglist>(GazeTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>GazeTask &amp;</type>
      <name>operator=</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a6d434428030eeca446ced9a18d19c60c</anchor>
      <arglist>(const GazeTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GazeTask &amp;</type>
      <name>operator=</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a69d250bddb913512147c7850906402b8</anchor>
      <arglist>(GazeTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a7a3a5341868b40b92cc1632695ec4ade</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a6aaf67f35aab816daa37233c713583c6</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a38f3201c5c73d5f8604deec4e5dca994</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a88cbac9f9e6eefc943c29c71112fe92a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a878677ece8cfa0616b69324439f985da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a00cdee887779d01af1a8ab19bcc9eb77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>aeab87f7137cbc82a7025eb0f138efed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1GazeTask.html</anchorfile>
      <anchor>a9f8ec1e5d0613d667423aa6615d5aa49</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GenInequality</name>
    <filename>classtasks_1_1qp_1_1GenInequality.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenInequality</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>acc4aa2bbdb2392a856830b123cea0aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>aeb0ca1c17412db12a0b356cf49db1153</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>a51f13cdeb74b567058a302fa995c8f33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>a325d9d056bb2f4384f2dd5d7782c7d67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>LowerGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>afbc386b920f098adbf97579136f7aafe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>UpperGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>ab9e1c4057da5a53adb8f42ab0a3de2c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>ab8b53c19e88c1e5b2dfe20f323406e4e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>a9d2a100b0cac057ed8ab9551c313c258</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>a43a34f4730c9c55f8534d0f0b6a18a10</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1GenInequality.html</anchorfile>
      <anchor>a0cb32ca9ea02aef63634de1e915ba1d7</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GenQPSolver</name>
    <filename>classtasks_1_1qp_1_1GenQPSolver.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenQPSolver</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>abc3b4a33780f8fe00fd5d3385dbaf808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateSize</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>aaf305726925f3693e24dd82b473817e3</anchor>
      <arglist>(int nrVars, int nrEq, int nrInEq, int nrGenInEq)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDependencies</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>abb590ac28fb2fa760304d276fd59e20c</anchor>
      <arglist>(int nrVars, std::vector&lt; std::tuple&lt; int, int, double &gt;&gt; dependencies)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateMatrix</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>a8fa9c75d06717be72cd03c6be8d966fc</anchor>
      <arglist>(const std::vector&lt; Task *&gt; &amp;tasks, const std::vector&lt; Equality *&gt; &amp;eqConstr, const std::vector&lt; Inequality *&gt; &amp;inEqConstr, const std::vector&lt; GenInequality *&gt; &amp;genInEqConstr, const std::vector&lt; Bound *&gt; &amp;boundConstr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>afb9f3d99281925cd65cf1f9b29ce89ac</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>a5b2bbb5cd5e65aeec71466a98bbc7d7e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>errorMsg</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>a4cf03fcd10207b5001b41f6fc26921bf</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; Task *&gt; &amp;tasks, const std::vector&lt; Equality *&gt; &amp;eqConstr, const std::vector&lt; Inequality *&gt; &amp;inEqConstr, const std::vector&lt; GenInequality *&gt; &amp;genInEqConstr, const std::vector&lt; Bound *&gt; &amp;boundConstr, std::ostream &amp;out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>aec603fc65e65ca4f3c38f94e50ed6790</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>default_qp_solver</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>ad8ee5e4fad141ae5f5e8b73e3842e847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>fullToReduced_</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>ad497fb681272aef64e78c7b3a775bfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>reducedToFull_</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>a7db3d83a10b1e0c60541ff1b0b226edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::tuple&lt; int, int, double &gt; &gt;</type>
      <name>dependencies_</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>aab010e6097d3344cc671ecd6b8e2a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>multipliers_</name>
      <anchorfile>classtasks_1_1qp_1_1GenQPSolver.html</anchorfile>
      <anchor>a7b7781b89821581eb94fbb825d2f30f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GripperTorqueConstr</name>
    <filename>classtasks_1_1qp_1_1GripperTorqueConstr.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>GripperTorqueConstr</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a158480db320f0d977606763c0ca30320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGripper</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a286eb4df1d89354be9b233791446cfab</anchor>
      <arglist>(const ContactId &amp;cId, double torqueLimit, const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rmGripper</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a7bcbd18c45c3b8492e53a9a03cf954a4</anchor>
      <arglist>(const ContactId &amp;cId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a6e4afbeb7025bb621f9c88ce71a544fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>abe6ec4a958f76661992909e5e78f9c27</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a42017c9a838cfb0dd9b189f10ad820a9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a9913bb0bd64e18c32055db5b5c984e01</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a24e7d5d7e69ecc695c1ce3066be3393a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a8dff80d4452b0185cbbe1c79851bd474</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a268d53dd40ca7695dd3117620d4d7345</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueConstr.html</anchorfile>
      <anchor>a2db7871d226e816c98808dae67f4c99e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GripperTorqueTask</name>
    <filename>classtasks_1_1qp_1_1GripperTorqueTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>GripperTorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueTask.html</anchorfile>
      <anchor>abd65c8e12ea38c8ca91a0caa344166f0</anchor>
      <arglist>(ContactId contactId, const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;axis, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueTask.html</anchorfile>
      <anchor>a6b50d096faeecd89b8f5bf3cd3b50a7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueTask.html</anchorfile>
      <anchor>abdf08c1a2db0a554763ee6bea6769e5c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueTask.html</anchorfile>
      <anchor>aa676ad46571e3eef31643d510a609906</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueTask.html</anchorfile>
      <anchor>aa09896a257cc3fd8493649c24cd9c16b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1GripperTorqueTask.html</anchorfile>
      <anchor>a8a73fe2849753f704d56f4c25fa4b2cd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::HighLevelTask</name>
    <filename>classtasks_1_1qp_1_1HighLevelTask.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HighLevelTask</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>ac11194ec5a81fc18b68209eadfcbf9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>aed24cd07ba6490a8508c2fcbc52e33f6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>a6af9649e3cd0adc1643a029333897d02</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>aef4463034eb44fa491bf38625eb7194f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>aef5ea97428888b6090d452a8eae15eed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>a967318520f594a0d4651d7556a66fb2f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1HighLevelTask.html</anchorfile>
      <anchor>a88096d0081301b60eca48964cad68145</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ImageConstr</name>
    <filename>classtasks_1_1qp_1_1ImageConstr.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>ImageConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a985c69282468b3d03abdd56b5306a7fc</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bName, const sva::PTransformd &amp;X_b_gaze, double step, double constrDirection=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a3b290ac691818ff86205030eafa730f2</anchor>
      <arglist>(const ImageConstr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageConstr</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>adf0dd8a09a53250bcda351cbfffb2dbf</anchor>
      <arglist>(ImageConstr &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ImageConstr &amp;</type>
      <name>operator=</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a7221bfd17d45d7208a1d02fd74d4dcbf</anchor>
      <arglist>(const ImageConstr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ImageConstr &amp;</type>
      <name>operator=</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>ad28102162a710241e4bef0b6f7555ade</anchor>
      <arglist>(ImageConstr &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimits</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a165ccf87f8ee29b59718f9b9f26eb020</anchor>
      <arglist>(const Eigen::Vector2d &amp;min, const Eigen::Vector2d &amp;max, const double iPercent, const double sPercent, const double damping, const double dampingOffsetPercent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPoint</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>ade42c4411d70987dd9d7cf815fd20636</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const double depthEstimate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPoint</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>adf5ee87ea11a6cab6f9effb1628c0d93</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a5c8b1d26e4c8c970a8b02746913491aa</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::string &amp;bName, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>af8e70d3cc1064425d610a60e6238352d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePoint</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>acdf39d5bf2e7f92f8e55a709d8af7cff</anchor>
      <arglist>(const int pointId, const Eigen::Vector2d &amp;point2d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePoint</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a68e323a8724a33f79e07de4052cb9629</anchor>
      <arglist>(const int pointId, const Eigen::Vector2d &amp;point2d, const double depthEstimate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePoint</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a6ce14c0643087decf45aeb77fd3bc0aa</anchor>
      <arglist>(const int pointId, const Eigen::Vector3d &amp;point3d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeComponents</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a33ccfd992094d6c78eaf85f52daca6cb</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const SolverData &amp;data, const Eigen::Vector2d &amp;point2d, const double depth, rbd::Jacobian &amp;jac, const int bodyIndex, const sva::PTransformd &amp;X_b_p, Eigen::MatrixXd &amp;fullJacobian, Eigen::Vector2d &amp;bCommonTerm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a0fd49c0ccf725afd398d3448fd4bfa72</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a247edf4a8f16779ac316498e3e921a23</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a46ab508ae974b7e6bb87f7c4394f1559</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a761cc69677cb48c5a691257b1676e9e7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a8d48b45ff73d2cd041c6746cf9e942a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a7e5134fd0d18fe23b8816474a8221ccb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>afe846ebea6fac1d3ec07233437f77b17</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>classtasks_1_1qp_1_1ImageConstr.html</anchorfile>
      <anchor>a110eeef19d93ee94d857af55793bf158</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Inequality</name>
    <filename>classtasks_1_1qp_1_1Inequality.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Inequality</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>a8971f0b14e1d2ea3e5b126692ff6fcf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>a8881dfaffbeff43b333cf9d30675f67f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>a23f610ba512845c6ed59a18d43bc6636</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>a7aa735890ecd53799b4a1604188b9b21</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>ac3bdd0a2b50b6560f33b0e5fdd106bfa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>ae498b14de5f3bb6786e04828c74ea88b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>af5215e8d2075f290375e9e4342cfb801</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>ace2e121e878fea4264e37d5cb15dc868</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>classtasks_1_1qp_1_1Inequality.html</anchorfile>
      <anchor>a6b76e75f578ae739fa31aecbddc937fc</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::JointGains</name>
    <filename>structtasks_1_1qp_1_1JointGains.html</filename>
    <member kind="function">
      <type></type>
      <name>JointGains</name>
      <anchorfile>structtasks_1_1qp_1_1JointGains.html</anchorfile>
      <anchor>add0cd36307b044425a1175e82be95c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointGains</name>
      <anchorfile>structtasks_1_1qp_1_1JointGains.html</anchorfile>
      <anchor>a5518172f15ccd822adeb64786855a9cb</anchor>
      <arglist>(const std::string &amp;jName, double stif)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointGains</name>
      <anchorfile>structtasks_1_1qp_1_1JointGains.html</anchorfile>
      <anchor>a84e051a4f37a2a15de59b3d900953f87</anchor>
      <arglist>(const std::string &amp;jName, double stif, double damp)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>structtasks_1_1qp_1_1JointGains.html</anchorfile>
      <anchor>a08d3a7fa0479efaaa54f8e49301e280f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>structtasks_1_1qp_1_1JointGains.html</anchorfile>
      <anchor>ab0a41a5153da3a170bafea2c4453a7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>damping</name>
      <anchorfile>structtasks_1_1qp_1_1JointGains.html</anchorfile>
      <anchor>a590ae8fd57e2a1e708491f05f3262ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::JointLimitsConstr</name>
    <filename>classtasks_1_1qp_1_1JointLimitsConstr.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>JointLimitsConstr</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>a79767272482e70fc2f72c97458a7d752</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, QBound bound, double step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointLimitsConstr</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>a0e4fcd5f93324877a64d14d0a0a9bb44</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, QBound bound, const AlphaDBound &amp;aDBound, double step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointLimitsConstr</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>a9abbdd2d7c48e6cf8a89df00e73576b9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, QBound bound, const AlphaDBound &amp;aDBound, const AlphaDDBound &amp;aDDBound, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>a984be9df17be72329169928ea4e550e5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>ad1bb25d2f65316dc645eda9db015e1ba</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>ab8e6a55d29ff77f6f6f62e99b1bdb8c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>a41bc40ccca62e878d41596926286a8bb</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>abae3c86c767903124a0f723d69474b51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>a98b0bf67cc7205182274f2359d9a6e8d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>classtasks_1_1qp_1_1JointLimitsConstr.html</anchorfile>
      <anchor>ad3aeca710610deccea5832e9b1c464f0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::JointsSelector</name>
    <filename>classtasks_1_1qp_1_1JointsSelector.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <class kind="struct">tasks::qp::JointsSelector::SelectedData</class>
    <member kind="function">
      <type></type>
      <name>JointsSelector</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>ae88597e200f45fd7a8aac6ca6ead5498</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hl, const std::vector&lt; std::string &gt; &amp;selectedJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={})</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SelectedData &gt;</type>
      <name>selectedJoints</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>aa31bd3846eb158e672cc56ff4db3f489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>afd92a00722939f678de4026a3bb023e5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>a6748d386aa6944d0fe18c535e9706220</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>ad5ab970485f2341570368247076d78e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>a6116b01d35b75254b9d2133ce02db497</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>ac05ad926e23d20e401c5031abc0cd2a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>a1775febb37e0b2799c38132cc354f2f7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JointsSelector</type>
      <name>ActiveJoints</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>afdc35a75ac5a8791ebccef9a784c6ad2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hl, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={})</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JointsSelector</type>
      <name>UnactiveJoints</name>
      <anchorfile>classtasks_1_1qp_1_1JointsSelector.html</anchorfile>
      <anchor>a6b4126966a9b47a8716498fe4cd55c8f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hl, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={})</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::JointStiffness</name>
    <filename>structtasks_1_1qp_1_1JointStiffness.html</filename>
    <member kind="function">
      <type></type>
      <name>JointStiffness</name>
      <anchorfile>structtasks_1_1qp_1_1JointStiffness.html</anchorfile>
      <anchor>a980bad314fc5bfe87b586df8195e6520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointStiffness</name>
      <anchorfile>structtasks_1_1qp_1_1JointStiffness.html</anchorfile>
      <anchor>a8c087e0882456550df07bda258fa420a</anchor>
      <arglist>(const std::string &amp;jName, double stif)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>structtasks_1_1qp_1_1JointStiffness.html</anchorfile>
      <anchor>ad4bedc4f72672de6e850add50e757853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>structtasks_1_1qp_1_1JointStiffness.html</anchorfile>
      <anchor>ad533f855fbb99ea34bad2832042c973e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::LinVelocityTask</name>
    <filename>classtasks_1_1qp_1_1LinVelocityTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>LinVelocityTask</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>ae921424aba1fecef6930c77b806ac926</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;vel, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::LinVelocityTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a7e3bb105336bad70048f7e23d9e47033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocity</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a7e8ca63a563784c7ed90c2c36d71eca0</anchor>
      <arglist>(const Eigen::Vector3d &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>velocity</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a7529d68f7590a7239faac490e3895019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a941b5b6c91e6ef5e4fe8b17f292960b9</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a3909a02c0017502381ad426d25bb5e6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a6d4547238156e63569624570665cd406</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>abaa06455f1922793eac565af72e5af73</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a45f7427e702936a6e126a6511ed281f1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a0304f0a1538ccdbf68d900780d58f99f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>a24080372bc1d732a53332433294c747e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1LinVelocityTask.html</anchorfile>
      <anchor>aa5c2ac3e28fddcce0b91c994a9b2f16c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::LinVelocityTask</name>
    <filename>classtasks_1_1LinVelocityTask.html</filename>
    <member kind="function">
      <type></type>
      <name>LinVelocityTask</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a5cd35cfbfb12de24095edf651e58700f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;vel, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocity</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a9ced043d1c378186715551e512a7574d</anchor>
      <arglist>(const Eigen::Vector3d &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>velocity</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>ac7cb7d60e8ab40e1b09c13f7713275b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>aa27b5d80826e16b98918d7c80b31c769</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>ad871ee4d00e07ebae1aae23bf10a1b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a01ac37878ebe04770a55233ef64e5c62</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a8c8da46a5b3abe0893135fc40fcb3075</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a291555f05786d8fac07082085d0b6f36</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a6729145bd085636e920dd2193f7d4ee2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a8100312b678051542c6776a274fcaa11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a07a0d0c7204ad4ebf780f1cb370b88ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a807d151c79d2c94f559b72a2551bdcc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1LinVelocityTask.html</anchorfile>
      <anchor>a76eea0f5ab306d03d23ff502c9ff794e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::LSSOLQPSolver</name>
    <filename>classtasks_1_1qp_1_1LSSOLQPSolver.html</filename>
    <base>tasks::qp::GenQPSolver</base>
    <member kind="function">
      <type></type>
      <name>LSSOLQPSolver</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>aa645ba408bf6eb66104caf2c95b2ea44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSize</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>a67156d6e5f1c418ee8b26f203606528a</anchor>
      <arglist>(int nrVars, int nrEq, int nrInEq, int nrGenInEq) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMatrix</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>a4b275b42f42b6228b0d6cb7842109294</anchor>
      <arglist>(const std::vector&lt; Task *&gt; &amp;tasks, const std::vector&lt; Equality *&gt; &amp;eqConstr, const std::vector&lt; Inequality *&gt; &amp;inEqConstr, const std::vector&lt; GenInequality *&gt; &amp;genInEqConstr, const std::vector&lt; Bound *&gt; &amp;boundConstr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>a754fa6e0109d3e024d26650ef12f1c64</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>ab3fd8e52ca0126799e3fdd05881d7cd7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>errorMsg</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>aa06e14e8def97a8fc92fd5003b2e6513</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; Task *&gt; &amp;tasks, const std::vector&lt; Equality *&gt; &amp;eqConstr, const std::vector&lt; Inequality *&gt; &amp;inEqConstr, const std::vector&lt; GenInequality *&gt; &amp;genInEqConstr, const std::vector&lt; Bound *&gt; &amp;boundConstr, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classtasks_1_1qp_1_1LSSOLQPSolver.html</anchorfile>
      <anchor>a2cb7152ce1bd97d8cb5d67d7e054cbac</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MomentumTask</name>
    <filename>classtasks_1_1qp_1_1MomentumTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>MomentumTask</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>af2696f6c37fc2fe6b4976cae7f3ad882</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>tasks::MomentumTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>aa09068452fc37a606b39bfbd125773a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>ab00abc708b5628eb27e36146dea5064e</anchor>
      <arglist>(const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>a6563421fd4036327c9901c0cf19c172e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>a8f9105b9b2559bc7fcd204f2ef0afe52</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>ad3cb9bd1bb45ac8eefab0403507bf681</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>ad6d940e2d230e3bb2ed5868633bc09b0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>a090d0d1a6bcf24d1a5348b609884c913</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>ad7107b60763a5571abc8e57738075f83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1MomentumTask.html</anchorfile>
      <anchor>a54b078bea9f88754b5792fa38e376b92</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::MomentumTask</name>
    <filename>classtasks_1_1MomentumTask.html</filename>
    <member kind="function">
      <type></type>
      <name>MomentumTask</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a7f72fc82102c98e12fb7c05a88576943</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const sva::ForceVecd mom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>ada28df5a2923384ea391fe592c776b64</anchor>
      <arglist>(const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a753edf1d427f6c9c2c94a1c7da59038d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>af27f19f834631cb7b9e06128b8dbb00c</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a22c6f63e7a56e20bf9293955781f3a95</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a0093f5739a9c2078d7ea883e7f477f7b</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a9199fa9699f748a44c0c7e2ff3bce1b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a634137c8569bb1c675ac725c53eb1196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>ac6099b8858ed274890a0f5b1b5355c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>a6ae47ef4942ab09b0bd6618da1071c27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1MomentumTask.html</anchorfile>
      <anchor>ac73d1ce26d3c3037eee8ab9816b7835a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionConstr</name>
    <filename>classtasks_1_1qp_1_1MotionConstr.html</filename>
    <base>tasks::qp::MotionConstrCommon</base>
    <member kind="function">
      <type></type>
      <name>MotionConstr</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a5dc804e968c47791630468c06584d2d2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionConstr</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a237ae18afb594776c638ff4c6d2b4e79</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const TorqueDBound &amp;tdb, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a4ca88b49c206bd95963294c4fadff0a9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd</type>
      <name>matrix</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>ac2e6cd33d0d97037b1e89443282203c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>contactMatrix</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a83f2bb42076faa8bb60ecec0edde0f9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const rbd::ForwardDynamics</type>
      <name>fd</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a702864a9fbe23aea8234f16e0bbe4dc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>torqueL_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a2dc3ec557ec06e2e2937fe7157753977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>torqueU_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a87385049d7441292c5250ec072e020d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>torqueDtL_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a71917438edcc177848f8bd83c1467bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>torqueDtU_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a593facccc83ebc3b2a9f1a10f573012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>tmpL_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a4e0fb5b9d57954dccbfe29361384f32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>tmpU_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstr.html</anchorfile>
      <anchor>a04a92f6cca63451514a6cd9b800a8f94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionConstrCommon</name>
    <filename>classtasks_1_1qp_1_1MotionConstrCommon.html</filename>
    <base>ConstraintFunction&lt; GenInequality &gt;</base>
    <class kind="struct">tasks::qp::MotionConstrCommon::ContactData</class>
    <member kind="function">
      <type></type>
      <name>MotionConstrCommon</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>ae71be277b8002ce97fe338eab8d084af</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTorque</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a0f5c31134d11d698137ff7a7f16c25b6</anchor>
      <arglist>(const Eigen::VectorXd &amp;alphaD, const Eigen::VectorXd &amp;lambda)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>torque</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>ab445d571caff0a9896db375a7c9c4a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torque</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a55ad8ef65ff98203f3bac9a44e49a130</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a2f0de18ccc2c231a3930d21a468eb5db</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrix</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a783cef81086c210b0430dff9829391f7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a76ee854a439912ca3c02e018029f2d3e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a8ca0bb02b52fae7712016ea2b26ac5cd</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a356079712a58601fc471517ce17b61b0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a8eac89bfa33ba8cbde244de44c68e95e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>LowerGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>ac9d187b5cdc5aa1367a1581b09e4e305</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>UpperGenInEq</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>acefc0f058dc1c8db1d2c9e593c6b5332</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a3843d4962b6ddfd6daebacb7d8e8c7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>alphaDBegin_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>abab4bc2b7dfe4ea581184b008702f9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrDof_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a5f03c92906291ec277c53991dfaf42c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lambdaBegin_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a35510f97cf24f0e6292ce4c10481ab1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::ForwardDynamics</type>
      <name>fd_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>aa0b1ab80838be2a021ebec95522228dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJacLambda_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>add4e8d750eefe4d196f4b124d04bbba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacTrans_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a017d89ce7edd9cef0dded59fd5c92960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacLambda_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>afc04e4c41aa5201d796ad9d2e15c4728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactData &gt;</type>
      <name>cont_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a9447370a70ac6a0ac21d102b890447ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>curTorque_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>af8dfcd48202dd0d87d0daa621eab9277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>A_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a2e1b827c418a55a43cb20133caa82d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>AL_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a8d3023d1d06e2565a9eea6d8bafbc6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>AU_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>a8541b39617273f08843bc213c60baaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>updateIter_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionConstrCommon.html</anchorfile>
      <anchor>added6edf746371f3f4ae0a3f2aa468e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionPolyConstr</name>
    <filename>classtasks_1_1qp_1_1MotionPolyConstr.html</filename>
    <base>tasks::qp::MotionConstrCommon</base>
    <member kind="function">
      <type></type>
      <name>MotionPolyConstr</name>
      <anchorfile>classtasks_1_1qp_1_1MotionPolyConstr.html</anchorfile>
      <anchor>a93f49c72d7b08577c529416df3a10587</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const PolyTorqueBound &amp;ptb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1MotionPolyConstr.html</anchorfile>
      <anchor>a294bc8b3c50ce8ce6ba423a08df9d3d1</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::VectorXd &gt;</type>
      <name>torqueL_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionPolyConstr.html</anchorfile>
      <anchor>a0c79e9d0ac757a2fa79c822cf2f72ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::VectorXd &gt;</type>
      <name>torqueU_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionPolyConstr.html</anchorfile>
      <anchor>a1b6a5c6234adbd54efbbecca67bc9c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>jointIndex_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionPolyConstr.html</anchorfile>
      <anchor>a1cb6d383d1f32142b8215f626496fe63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionSpringConstr</name>
    <filename>classtasks_1_1qp_1_1MotionSpringConstr.html</filename>
    <base>tasks::qp::MotionConstr</base>
    <class kind="struct">tasks::qp::MotionSpringConstr::SpringJointData</class>
    <member kind="function">
      <type></type>
      <name>MotionSpringConstr</name>
      <anchorfile>classtasks_1_1qp_1_1MotionSpringConstr.html</anchorfile>
      <anchor>aae4c8dbb6054294ea28eda06f032219a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const std::vector&lt; SpringJoint &gt; &amp;springs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionSpringConstr</name>
      <anchorfile>classtasks_1_1qp_1_1MotionSpringConstr.html</anchorfile>
      <anchor>ad0944797929973c29d8484bb07fa5325</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const TorqueDBound &amp;tdb, double dt, const std::vector&lt; SpringJoint &gt; &amp;springs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1MotionSpringConstr.html</anchorfile>
      <anchor>abc6952a34aa867dad0e34cbf1497afa9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SpringJointData &gt;</type>
      <name>springs_</name>
      <anchorfile>classtasks_1_1qp_1_1MotionSpringConstr.html</anchorfile>
      <anchor>aad13ef10076249984674dec4c1798299</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MultiCoMTask</name>
    <filename>classtasks_1_1qp_1_1MultiCoMTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>MultiCoMTask</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a83d448ccdac0d5ea230e8434b45dcf5f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, std::vector&lt; int &gt; robotIndexes, const Eigen::Vector3d &amp;com, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiCoMTask</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>aeb784606cbeff3dd1f11242220b0a321</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, std::vector&lt; int &gt; robotIndexes, const Eigen::Vector3d &amp;com, double stiffness, const Eigen::Vector3d &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::MultiCoMTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a8f73be76e6cfcb62ddce82f154531fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a24e9620f39cd1373795f289dee790358</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a9f212794a88f61914f1178c96b51b17c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a005cdfb54ff499a7dcae0a1844ec22b6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>aa513e4993ac530f3f726a9046bf61a8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a8221af719aa9467bc77dee576bb65150</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>ab6ab2c8b3a202e1a486917d670f16d90</anchor>
      <arglist>(const Eigen::Vector3d &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>ac398c1c957506a10ff723aa7242c0fe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a3667730ac23bf535009a8d7ec1d607f7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a5c934d8275e76cd3c59efe922d27b198</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a7bc3b436843016eb07f6b7fea3379227</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>a34ec8f1a9927d1593091f10c9dfa6085</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>abae95d285b06299534084057e72baca3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>aa98046e882569c572c6366e7bca29707</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1MultiCoMTask.html</anchorfile>
      <anchor>af7ce542e9a84c743497aaf74ede80949</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::MultiCoMTask</name>
    <filename>classtasks_1_1MultiCoMTask.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiCoMTask</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a481fe0d7f675e85e5bd9b867693dfa33</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; int &gt; robotIndexes, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>robotIndexes</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a0ca971dfffb25a76bfba3f54f2266fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a22b45d38d8c2f4e9cd4dca94f0a03177</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a8d3604d722f20ecf24d3d65b30b19120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a0eddb2f22c0eb8c99c82bb20091d5c1b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a5ff62c598d20e5fcb3369c796b41b65b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a98822f979d05e4110cda215928c975b3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const std::vector&lt; std::vector&lt; sva::MotionVecd &gt;&gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a12b29eecea86d5d97dd8ec8404c94a00</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const std::vector&lt; Eigen::Vector3d &gt; &amp;coms, const std::vector&lt; std::vector&lt; sva::MotionVecd &gt;&gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>afb000746752b28f028b088cb8d49c390</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a6a641f3aed1ec43ed2ebe736fd737d40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>aef425995244a376f81f81927d9ef182c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1MultiCoMTask.html</anchorfile>
      <anchor>a50e9cd1f9ae4b17f17a795ae6b164283</anchor>
      <arglist>(int index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::MultiRobotTransformTask</name>
    <filename>classtasks_1_1MultiRobotTransformTask.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiRobotTransformTask</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a8f6e1b8388384c5089b9297d65a848d8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, const sva::PTransformd &amp;X_r1b_r1s, const sva::PTransformd &amp;X_r2b_r2s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>r1Index</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>aba6b56e514165a1c2e1eaeed87536482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>r2Index</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a3ac3c39e41fc0bcec84e373ad65eeedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r1b_r1s</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a1a9bbc561f3314f9eb435d94145c5567</anchor>
      <arglist>(const sva::PTransformd &amp;X_r1b_r1s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r1b_r1s</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a8fd561cdb278950786c7f8fa6ff708bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r2b_r2s</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>af7058dcac3a76234456ffc14d971c40c</anchor>
      <arglist>(const sva::PTransformd &amp;X_r2b_r2s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r2b_r2s</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a1083956c47548aba65fb917e53f966d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a251727256873e2bd2df730be58bd9781</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const std::vector&lt; std::vector&lt; sva::MotionVecd &gt;&gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>af9e23d43a0e0e8457611092e043edc3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a34f465854954916811ba4146a76b3c53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>add70ed8d65822c0135338170f621c14a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a26bd2ac21835a6dafecb1f479f3cb1e9</anchor>
      <arglist>(int index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MultiRobotTransformTask</name>
    <filename>classtasks_1_1qp_1_1MultiRobotTransformTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>MultiRobotTransformTask</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a438e347acb8969ab6a948c2e726bab66</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, const sva::PTransformd &amp;X_r1b_r1s, const sva::PTransformd &amp;X_r2b_r2s, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::MultiRobotTransformTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>ad333f1aa17a31d472a9548d1823dc012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r1b_r1s</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a3f042cc46b00c04c05133f2e319bc0e2</anchor>
      <arglist>(const sva::PTransformd &amp;X_r1b_r1s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r1b_r1s</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a1e5ef566529294b3f86c1a6883d95023</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r2b_r2s</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a79b01da25b40a7c24c449976394da2eb</anchor>
      <arglist>(const sva::PTransformd &amp;X_r2b_r2s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r2b_r2s</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>ae1fef729e15b50e7eba0c8f7029bf0e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a9e23329e5a1eb9b33db3236921ec6eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>ab3e574aef688945a13ab3de0cda4924a</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a3da35f9a95d597d82e640729611166bf</anchor>
      <arglist>(const Eigen::Vector6d &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a9c9ff0cd56feb0eb0d0aaf6dbd7096d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a62994de890fe6c6c007cb575793e5acf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a4572a60574c8a6aaf4aefc1c48d19f61</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>a6830876e0c5f20c8165a0868cb57398b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>ac625104a79177da111e996e03cfe9255</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>aba4376ae9a56de8427bc8821cb91717d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>aad8eaa316dc6645b9830d7f54b1401b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1MultiRobotTransformTask.html</anchorfile>
      <anchor>abe0b7f72274b0ad80bada70930cc71e4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::OrientationTask</name>
    <filename>classtasks_1_1qp_1_1OrientationTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a9ca2da9ac942d356c2d15af3e6142c5f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a0d09d04a207fbbc58c836a2a0a4eedc0</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>tasks::OrientationTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>adaebfcb08486fac0cd18b40199385ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a9de2c07ae093d84cc59539c10a71b4d8</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>abd0659080c43b461360e23482f8d5846</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a2f58f0affe48b74a13980dd902dfaca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a70a6227d9d82964c312e6247363f9469</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a26a8d6f1f69268bf60e13fbdcd5b121c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>acfbaa0d2818de01db02a1ff87e134c24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a798cd8da2f9edbf9904e492e7cd8f138</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>a2ff18f2a7a3f7e8ff4c92d2d172c3788</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTask.html</anchorfile>
      <anchor>afbc5c7e69ef0f9058ea4a8162f67b9ce</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::OrientationTask</name>
    <filename>classtasks_1_1OrientationTask.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>ad2446f810c20ba64897cd14ca9ac5111</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a56ba8d07126797bb8979983637d148db</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a49c880820a1b5c8df79dd9e334be3659</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a66fd057c7e3881acde06654fe7b78b3f</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a59f669520d9608e83f5f7e5d4651748b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a3742876c52257b6981ff0f3a1ba49187</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a0a3f138249bb1e3a50b38d2d146ce9bd</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a9eee6faa64e247fe82f8c7564fb4ef52</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a08678e5c44d3b28ee07e85f796d77051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a60985fab4c11750fed1ca5d08a22c6fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a4dd0e7f1ce32a35980b76d80a5118257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>a927eb2498436b857af274206c03d7dab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1OrientationTask.html</anchorfile>
      <anchor>ad09085fc3d1bdbb0126d0e439461a2b3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::OrientationTrackingTask</name>
    <filename>classtasks_1_1qp_1_1OrientationTrackingTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>OrientationTrackingTask</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a9093bee511f486da7ef68cbd8675fffe</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::Vector3d &amp;bodyAxis, const std::vector&lt; std::string &gt; &amp;trackingJointsName, const Eigen::Vector3d &amp;trackedPoint)</arglist>
    </member>
    <member kind="function">
      <type>tasks::OrientationTrackingTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>af19b576f25879b9372466010f75b45a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackedPoint</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a5dad8875dc7ea013ca5642959e1fc590</anchor>
      <arglist>(const Eigen::Vector3d &amp;tp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>trackedPoint</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a8cbbca770aa4c2c757f069a967610c2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ac00a77ee9ba777f8d4787d2de7b8d2d1</anchor>
      <arglist>(const Eigen::Vector3d &amp;bp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a81e1bcf219868e1287874967b029b77d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyAxis</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a96cd54d60050fbf75507938f666364e1</anchor>
      <arglist>(const Eigen::Vector3d &amp;ba)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyAxis</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>aad88e6d9db2eaf7019a0e2b1dbfbd063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ae1091b454430ab6adffc179635ea04e1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ae5a6c523af2c1cc8eac1be06eefaa339</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>af1847a594b4b4a42cb346450be6b7533</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a8fe11257f96418be09e5f3145e4c5388</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ab6250afd822682b2db0c6e81349c122e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a2c340c63d6519bfea9c66aa646ae9afa</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::OrientationTrackingTask</name>
    <filename>classtasks_1_1OrientationTrackingTask.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientationTrackingTask</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ad1edc9ba39bb298ec7a1cbc30861140d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::Vector3d &amp;bodyAxis, const std::vector&lt; std::string &gt; &amp;trackingJointsName, const Eigen::Vector3d &amp;trackedPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackedPoint</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a59dbb085045905d0e4e2091fe6724fdf</anchor>
      <arglist>(const Eigen::Vector3d &amp;tp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>trackedPoint</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a509f58fecc317de86764c0ac67701fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>aaa678759585e9637a17c6e683217f8b1</anchor>
      <arglist>(const Eigen::Vector3d &amp;bp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a30647b8d797a5cea353d618a451b3879</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyAxis</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a5381bcc6a385319e3cb7819f8ecd38fe</anchor>
      <arglist>(const Eigen::Vector3d &amp;ba)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyAxis</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a440d0453f2b49373d4362b2a075565bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ae97d66bbc9c1f7993f5704d7ea229a1e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a371555e79bbb2217b373de54783fb55f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>ab2d1322a5cb47037c436d313f41bb2e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a99e2423d0cbb15146805209806bed7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1OrientationTrackingTask.html</anchorfile>
      <anchor>a721d884566d4ec0188f4a8222778e5c2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PIDTask</name>
    <filename>classtasks_1_1qp_1_1PIDTask.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>PIDTask</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>a783c2670608cceb45f38b16401b0a26d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double P, double I, double D, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PIDTask</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>ac2fdc130fa9f635ac91a6481e7efbda9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double P, double I, double D, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>P</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>abac0d45e211f5b6daf231010a524670c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>aa0c88004bc4ea75b740e9bc99c74cc47</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>I</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>a6ebb81d2516e52138d1f9c0e56ddaa9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>I</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>acd5b82eea8b6aabdc79009794208ce9e</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>D</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>aec92ac95f5fce7560b0c54b5fe0fd587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>D</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>ac77eb878ae008a6368bc21a14179d7b7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>a76f9bbf011664a28795196d792cab96a</anchor>
      <arglist>(const Eigen::VectorXd &amp;err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorD</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>ad6f5e4e28b24ab2675d397c0467c6191</anchor>
      <arglist>(const Eigen::VectorXd &amp;errD)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorI</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>a5fc5bd479b8df6b3394688a42281c49e</anchor>
      <arglist>(const Eigen::VectorXd &amp;errI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1PIDTask.html</anchorfile>
      <anchor>af5d09c64a10a19ccc386e455828243cb</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::PolyTorqueBound</name>
    <filename>structtasks_1_1PolyTorqueBound.html</filename>
    <member kind="function">
      <type></type>
      <name>PolyTorqueBound</name>
      <anchorfile>structtasks_1_1PolyTorqueBound.html</anchorfile>
      <anchor>a3dd3f2707509e52e84f0d1ed3edc1072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyTorqueBound</name>
      <anchorfile>structtasks_1_1PolyTorqueBound.html</anchorfile>
      <anchor>a60ae0a607860c7b1eeb10c3eb1900d8d</anchor>
      <arglist>(std::vector&lt; std::vector&lt; Eigen::VectorXd &gt;&gt; lPTB, std::vector&lt; std::vector&lt; Eigen::VectorXd &gt;&gt; uPTB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; Eigen::VectorXd &gt; &gt;</type>
      <name>lPolyTorqueBound</name>
      <anchorfile>structtasks_1_1PolyTorqueBound.html</anchorfile>
      <anchor>a2940edde14b86bf399b4122861178b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; Eigen::VectorXd &gt; &gt;</type>
      <name>uPolyTorqueBound</name>
      <anchorfile>structtasks_1_1PolyTorqueBound.html</anchorfile>
      <anchor>a7f89616b892fe7142ff2159fbf3454b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PositionBasedVisServoTask</name>
    <filename>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a354e8653167d8351ace362339c4db9b0</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_t_s, const sva::PTransformd &amp;X_b_s=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>tasks::PositionBasedVisServoTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a08e523b76b079de3ac9d0b4e36e0b7a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a18f74604dedd9fab8d985bfde7f939af</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a944dae3728acf481d09607c2a54c9b53</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>ab4e6cdeb77ecbe9f4628247f3d73dfa9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>abcabce248c3deb085b42f6f203ae8ef3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a69cb7dfd8d1c0d4c2909fb02b175e2d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a69ce1a68e121133af079d5b6db872c72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>abcfec14f37470851f2d50f594a764b7c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::PositionBasedVisServoTask</name>
    <filename>classtasks_1_1PositionBasedVisServoTask.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>abe06e4b1ed45ed0009b77b46b558bb16</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_t_s, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a2f7b68a83a47b63176246f5e32207331</anchor>
      <arglist>(const PositionBasedVisServoTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a0e31b0b7e5c2c76094852a15b8a53fca</anchor>
      <arglist>(PositionBasedVisServoTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>PositionBasedVisServoTask &amp;</type>
      <name>operator=</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>aebe6dd5ac9f7688125ac747addd295dd</anchor>
      <arglist>(const PositionBasedVisServoTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionBasedVisServoTask &amp;</type>
      <name>operator=</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a2a0d8bb48bc7ed8983808194dbaf33d4</anchor>
      <arglist>(PositionBasedVisServoTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>ae5aee442b94ceb3dae1a4dd51bc9d8fb</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>aa1075ff878937412274bcc7a27ce258b</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a2935fe68be79101ef2c4b87a1629b538</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a9386aaf7ef80690eb533750e3ea8fbdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>ad50a0b4df86991573a2e52c8919c2fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>ad0330e76f2427a5333380097b4b0a9d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a85e83a8e741cf7295279fb42daef2520</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PositionTask</name>
    <filename>classtasks_1_1qp_1_1PositionTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>a4e62387a66f8fcda315b09ccb5b7a61e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;pos, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::PositionTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>a7f25f8900bd1f60713f457d644d7f475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>ab87c8b5a100da4d6368c11564676267f</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>a8eea98be88dfe3fb50a4543f394b023b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>a64ffb42b4665cbe52c05e8de5349f4bd</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>a45c8754fe1a2aff6ce727e09185f7853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>aaaf4db680518858da754c91c98bd3ba9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>a1200ea6f0088c6fbb4ee1eec4d873931</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>abb755277b5359982c4290def54c50998</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>ac18a4238c6d0613aa910d8e075d4662d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>ac92338815e82013c97414b9172d1411c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1PositionTask.html</anchorfile>
      <anchor>abbd314900215faa9dd27f20169c4278c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::PositionTask</name>
    <filename>classtasks_1_1PositionTask.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a1a41b45043e1586d8fc684471f34e9c0</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;pos, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a818b07e3aabb8b4706b47a1e95a47a87</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a233b0bedf0ac5b3fe0ba3d18e7e1d8bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a7a2ca4be9a7dbeb95a4446874895628d</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a2bffe60c3cba1cbef682d84b0f8477e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a7d3a8ff6985e75f435c7fb37828bfaf7</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a8751f0ff4aceca35a755979bb7e2343a</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a838e7875aeb7b6d34a083a48ca1124d7</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a7868fc50c34b95df66cb8131e4688e05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a007fa73b7112b84cb34a1fce25819d97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a60bb898385e77d6d8d4f94478c6fe8c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a7a4377ff40443b37619e2f350043b5b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1PositionTask.html</anchorfile>
      <anchor>a4a91487dacd1b0d1795fbde0f0d6b747</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PositiveLambda</name>
    <filename>classtasks_1_1qp_1_1PositiveLambda.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>PositiveLambda</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>ab5e4993a0155ac603bf2f87514a5709f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>af516ba59fed96817b3eb62bd581f05cf</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>ac757a23a5327ba6c2975494a800625c1</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>ae4c79b679ffda2c9bf68ab7a079085bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>a7464003481589a0968b4cf74233aa3ba</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>a3d1a8b8cee9c80f49443067318b13ee9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>a99c2254883edaa962c94492451e3b5c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>classtasks_1_1qp_1_1PositiveLambda.html</anchorfile>
      <anchor>a9b5eff03540d2f871c7087d7361d661f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PostureTask</name>
    <filename>classtasks_1_1qp_1_1PostureTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>PostureTask</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a014070c521341a6488492558d5080234</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, std::vector&lt; std::vector&lt; double &gt;&gt; q, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::PostureTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a55df27b6efa8444d80f0d462d9349539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a932dcd7caf4b368696e3347d85af40cb</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; q)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a200d9f852849062c1ad9dd939da33a35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a522b39945ac7ffca163713ba64ebb1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>ae97a9862ab4fe2dc6bc750ffafa93364</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a1b101f6bb5ffca9134a1988f622076a5</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a739a5d0d760ba01113ea18aa3160c0da</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a0d16ea5b77758fe575667d0f43f319f9</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointsStiffness</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>ad19b1e4174a86647c7b20ec5f8044b33</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; JointStiffness &gt; &amp;jsv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointsGains</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a23e6411a9dda29177e1e1fef921a1ff8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; JointGains &gt; &amp;jgv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a955f3aed6aaf15463327d39ef7061a3c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a88f6a1718f19bd9cd6abb54b03e42f09</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a25bc0c029d3ef0bc0fb1f5efba2e629f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a27b7014036c1c1c01961b35a2c9c241c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a69ac4441b510a24116dd7324868bca35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>aa983b4d60327b7481f5ae41acbafeb68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a4d0d58d6c426edd2608e81179c898523</anchor>
      <arglist>(const Eigen::VectorXd &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>af001530fc44c9ae6ce85d3039d514be0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a9dd0c104a3685262fc6bdc152f17cb4d</anchor>
      <arglist>(const Eigen::VectorXd &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a02f6f759473bc78717ec35c0345171f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a6c2ee611b51d871449054d76e279b99b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1PostureTask.html</anchorfile>
      <anchor>a0eb5b041190c10ec6e2cdb39c4945999</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::PostureTask</name>
    <filename>classtasks_1_1PostureTask.html</filename>
    <member kind="function">
      <type></type>
      <name>PostureTask</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>a9296575c5d97f7a29c6877ee39e5cd79</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, std::vector&lt; std::vector&lt; double &gt;&gt; q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>a9f5611e197a54e421bce3f6c01a5edb6</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; q)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>afcb8036a3d9e36d698aba61cd0a18674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>a2aa0643bd9456d8b976136327f491d59</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>a62ea6be0a8a5abfd3481c0650d330674</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>ae6b11bfa731e8b386be36b7068ad3176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>a2ff1a744e3359dc3e263a3efcd2302b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1PostureTask.html</anchorfile>
      <anchor>a6c3bd74baf89161070c39737765ac9a9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::QBound</name>
    <filename>structtasks_1_1QBound.html</filename>
    <member kind="function">
      <type></type>
      <name>QBound</name>
      <anchorfile>structtasks_1_1QBound.html</anchorfile>
      <anchor>a9adaf296f18e8d83bea065e232714633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QBound</name>
      <anchorfile>structtasks_1_1QBound.html</anchorfile>
      <anchor>adb75555826261616bcfc52c56ec0a863</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lQB, std::vector&lt; std::vector&lt; double &gt;&gt; uQB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lQBound</name>
      <anchorfile>structtasks_1_1QBound.html</anchorfile>
      <anchor>a8b98c406f6daa08af4a7883ba00cf844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uQBound</name>
      <anchorfile>structtasks_1_1QBound.html</anchorfile>
      <anchor>a5ed0fe5130f66d16efcb5af347c9f9be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::QLDQPSolver</name>
    <filename>classtasks_1_1qp_1_1QLDQPSolver.html</filename>
    <base>tasks::qp::GenQPSolver</base>
    <member kind="function">
      <type></type>
      <name>QLDQPSolver</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>a23f91afba5699bb41d02a3081c1ab59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSize</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>ac39b5fa66ffe4aa42c22e3119981268e</anchor>
      <arglist>(int nrVars, int nrEq, int nrInEq, int nrGenInEq) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMatrix</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>a30ebcbf8ae6ce83caac665e07fb83ef6</anchor>
      <arglist>(const std::vector&lt; Task *&gt; &amp;tasks, const std::vector&lt; Equality *&gt; &amp;eqConstr, const std::vector&lt; Inequality *&gt; &amp;inEqConstr, const std::vector&lt; GenInequality *&gt; &amp;genInEqConstr, const std::vector&lt; Bound *&gt; &amp;boundConstr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>a96cc2b5d90faaae84bac06d5d5acf6ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>a63cfa790fe87436d11657c6c3d5e1ee5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>errorMsg</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>a2cb5a9a27ea6b3a501217a974c67b1ab</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; Task *&gt; &amp;tasks, const std::vector&lt; Equality *&gt; &amp;eqConstr, const std::vector&lt; Inequality *&gt; &amp;inEqConstr, const std::vector&lt; GenInequality *&gt; &amp;genInEqConstr, const std::vector&lt; Bound *&gt; &amp;boundConstr, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classtasks_1_1qp_1_1QLDQPSolver.html</anchorfile>
      <anchor>aa1c9b49bd2a1055f5656d6061cb3f244</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::QPSolver</name>
    <filename>classtasks_1_1qp_1_1QPSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a3dc6ee572596111c1fd7a90e70bac431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QPSolver</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>abf17142db1a5e1f0cd77bdf57cede049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a925c6ba27e4dc9f7f3ff35a9124e64c6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveNoMbcUpdate</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a76f4a180008ecb981e5dd3cbd97e363a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMbc</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>acb62fe98d24d9060a38328f2f4b4c537</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc, int robotIndex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConstrSize</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a01ef16a400b03ee96b693178f8f8c3c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nrVars</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a3566db8fd39179b06716346ca38772f8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; UnilateralContact &gt; uni, std::vector&lt; BilateralContact &gt; bi)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrVars</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>ad5191bbf2901b1929ca3ec3695b890f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTasksNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a5c98c41063c0ab23a44d3443306a529c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConstrsNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>ad6508b961b3b4157ce91dc4908efb8bb</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a104e7d56cc3c4d0dbedda82044ef5da1</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEqualityConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a33f936bcb429bdd74db4faba1607372e</anchor>
      <arglist>(Equality *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEqualityConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a96b89e11b3af378cf9b061081bc26bdc</anchor>
      <arglist>(Equality *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrEqualityConstraints</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a14180bff3ae64c749c82c06fe3bc7e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInequalityConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>ae6c099ec98ffff884dcd08a8c93db8de</anchor>
      <arglist>(Inequality *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInequalityConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aee00caa7486892ea0f803472efb4abc5</anchor>
      <arglist>(Inequality *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrInequalityConstraints</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a3f9d77e9f55cf841d86af72cb447add3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGenInequalityConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>af2ba5e078ecf042af01652575d4b5ce3</anchor>
      <arglist>(GenInequality *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGenInequalityConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>ab99e8755f30071d58d724289d13da805</anchor>
      <arglist>(GenInequality *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrGenInequalityConstraints</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aa2b545e57636ac264ebf9c8890ce349a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aea99c8e6fb55de731fdb1717994c0c4d</anchor>
      <arglist>(Bound *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBoundConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a98be3e0e5961c0417dc0bbcb13c4d7a9</anchor>
      <arglist>(Bound *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrBoundConstraints</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>acefe30851cd0fa18cda7d96fc7726ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a26214b5fb5b521512df2538b936c8b80</anchor>
      <arglist>(Constraint *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>add0e6284f22242fe8d821eaf4d9b70aa</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, Constraint *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraint</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a28bac3dae8cd554eda5f29615ae4b19a</anchor>
      <arglist>(Constraint *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrConstraints</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a2940bea1596cc7f9064444ed90ba75b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aa9872e1bed92555f20c1e390931ace43</anchor>
      <arglist>(Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aaeb05cde3bd5055144315c20c847a969</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>ad9707224d937e84053cb245ababd0b9b</anchor>
      <arglist>(Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTasks</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a038c63bcc76e9ddc446a1b993d6e6d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrTasks</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a1c8120567e8b351899af4ae59fc511f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solver</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aa813f55ac59255d31627483693db1766</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>solver</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a8138a8ef5929d227b0f07201920ef44f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SolverData &amp;</type>
      <name>data</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>affcd9ac8a44f012b0920cf99b25198cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolverData &amp;</type>
      <name>data</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a8a1acf24ccb416ecd607eb1169499387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a2486c97839d9f0b2a60b0ebe6a49953d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>alphaDVec</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a6716bb66291020cb24b918625ebda903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>alphaDVec</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a436705f945a3af4aee3d347eedf7ac5e</anchor>
      <arglist>(int rIndex) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aeafbe2e1568bad9d13e5bc5cdcb32b55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aa267e43938c0997554da085ba840ecca</anchor>
      <arglist>(int cIndex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>contactLambdaPosition</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>aec4b798ffdb8f0e92b03418bdbdaa9cf</anchor>
      <arglist>(const ContactId &amp;cId) const</arglist>
    </member>
    <member kind="function">
      <type>boost::timer::cpu_times</type>
      <name>solveTime</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>ac009e655ee4124cb099c1d6170980bc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::timer::cpu_times</type>
      <name>solveAndBuildTime</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a2ff4e607e4d85cdf16172310e112b1ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preUpdate</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a52520a9ff09e393a0dfd2b957550c8af</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postUpdate</name>
      <anchorfile>classtasks_1_1qp_1_1QPSolver.html</anchorfile>
      <anchor>a702d09b66239c2beccbf258e86c7835e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, bool success)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::RelativeDistTask</name>
    <filename>classtasks_1_1RelativeDistTask.html</filename>
    <member kind="typedef">
      <type>std::tuple&lt; std::string, Eigen::Vector3d, Eigen::Vector3d &gt;</type>
      <name>rbInfo</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a75ccd14f42390a90f4fa913647844840</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeDistTask</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>ae61d9885b5904b203d0290b0de489cd0</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const double timestep, const rbInfo &amp;rbi1, const rbInfo &amp;rbi2, const Eigen::Vector3d &amp;u1=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;u2=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotPoint</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a3ea4a20a552a873d090c584477f58c4f</anchor>
      <arglist>(const int bIndex, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>envPoint</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a2ac26562c72ef4f9c697e027ccc7e0e6</anchor>
      <arglist>(const int bIndex, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>acb8164d6f23aba4482cc14e56225081d</anchor>
      <arglist>(const int bIndex, const Eigen::Vector3d &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a1432afeef1ca0c5013e740c19fe11177</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a3d12e27c6b1fc38120b5e23082fba675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a689a400702a67d0546268e99267e12a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a156965526e6b9c232a20d48161755f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1RelativeDistTask.html</anchorfile>
      <anchor>a58eb36795e31907c275a4297bfba700e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::RelativeDistTask</name>
    <filename>classtasks_1_1qp_1_1RelativeDistTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>RelativeDistTask</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>aee57978784aaab94d4f038f06afecb63</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const int rIndex, const double timestep, tasks::RelativeDistTask::rbInfo &amp;rbi1, tasks::RelativeDistTask::rbInfo &amp;rbi2, const Eigen::Vector3d &amp;u1=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;u2=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::RelativeDistTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>a585bc9c8c947501a9a551de98c199157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotPoint</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>ad3c8ae8598019167f9097a0ed3563747</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bName, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>envPoint</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>a39c737ceec7d5b3242df364d6df79815</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bName, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>ab195e00cfebc156a2e62be8f5ca0ff8f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bName, const Eigen::Vector3d &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>a2a076d883ae2ae9148125a1cf90290d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>a2ae0402d3775be02c26639fdbce5fd9f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>ac6d357950d8d05ad887162dacf4e9923</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>a601396fd9a2a9629cc0e4c3b65512b68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>a4ac941235d8a5233dca4c1195a146ded</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1RelativeDistTask.html</anchorfile>
      <anchor>ad45f5efa2b1ebaa8d1ef97476689d9f1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::JointsSelector::SelectedData</name>
    <filename>structtasks_1_1qp_1_1JointsSelector_1_1SelectedData.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>posInDof</name>
      <anchorfile>structtasks_1_1qp_1_1JointsSelector_1_1SelectedData.html</anchorfile>
      <anchor>ac2c3ce5bd04545655fefe4ac0a701159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dof</name>
      <anchorfile>structtasks_1_1qp_1_1JointsSelector_1_1SelectedData.html</anchorfile>
      <anchor>a67cd5c7c9bb87ce3c7e7940e2e75efce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SetPointTask</name>
    <filename>classtasks_1_1qp_1_1SetPointTask.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>SetPointTask</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTask.html</anchorfile>
      <anchor>a1923d25709fc0342fb0fc3500073fd4c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPointTask</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTask.html</anchorfile>
      <anchor>aa6f09ff46587aa9096aad7fecdad4c7d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double stiffness, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTask.html</anchorfile>
      <anchor>a4ee51c133ebc8652157c20ac03c78b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTask.html</anchorfile>
      <anchor>a1c99498ee959a53b793d7d4159423f39</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTask.html</anchorfile>
      <anchor>a8f6c6b654860266c5d60aaa7e34407c2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SetPointTaskCommon</name>
    <filename>classtasks_1_1qp_1_1SetPointTaskCommon.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>SetPointTaskCommon</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>ab4b4f7d6cbbd698ef3104ba4359cc438</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPointTaskCommon</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>adb22d1e13f33aa6f200c11146b906808</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>a13a46dd4aae9e60547c77986c7af6449</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>a7a88e6b7780d0c64a3c524900d57dc6b</anchor>
      <arglist>(const Eigen::VectorXd &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>a181ba467b3cf7cdfb4381fc75733b8c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>af1a4ce1fc6abeb0c0d9bf19a42f56f3a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>a90db48843310ab61f32513789ad633a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>aa19d29a81de18c52d0dd68a788e2bcd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeQC</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>ae43173f7c7d010652d3d3fbf51efb63b</anchor>
      <arglist>(Eigen::VectorXd &amp;error)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HighLevelTask *</type>
      <name>hlTask_</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>ab1419cfba08d04f7d3937fcd173fcc2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>error_</name>
      <anchorfile>classtasks_1_1qp_1_1SetPointTaskCommon.html</anchorfile>
      <anchor>a693d49f655a124a1910ae42344230b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SolverData</name>
    <filename>classtasks_1_1qp_1_1SolverData.html</filename>
    <member kind="function">
      <type></type>
      <name>SolverData</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a807cfb7d85f3ba3f983572fdf9ad7899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrVars</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a4571db638e721f5a0a5c36174067a8ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalAlphaD</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>ac61f8c2d21b33f137dae6106f3687cd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalLambda</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>aaf988ff8350ce5171b52a3dd0df8e380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alphaD</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a1f25c7384a58a59df973669e06082f95</anchor>
      <arglist>(int robotIndex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lambda</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a2694f9c69b51375902c71fc329c202c4</anchor>
      <arglist>(int contactIndex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alphaDBegin</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a09e7eb1b358672a3ef7249c4029901d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alphaDBegin</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>adcdb59d164bc2cadf8f545755350ffe3</anchor>
      <arglist>(int robotIndex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lambdaBegin</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a28e26fc43e01ecea91359e1a6bd4b89a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lambdaBegin</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>aaf0726a5b31b66a8c0b2908105fb1c87</anchor>
      <arglist>(int contactIndex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrUniLambda</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a381df5b42768265e9c33aacb3db96d44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrBiLambda</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>ad6b1a35c3d030c687cdb9633dded5c86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unilateralBegin</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a213fc618900d57def40b793a3eb50517</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bilateralBegin</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a5120f16fa20cfa2459b504eade2efce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrContacts</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a4ad25cf82b791ab891415de3f47406f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; UnilateralContact &gt; &amp;</type>
      <name>unilateralContacts</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a0b2db915496e37412e8f02330e77dc96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BilateralContact &gt; &amp;</type>
      <name>bilateralContacts</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a51bd20cf47183b5f508423b304e9da80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BilateralContact &gt; &amp;</type>
      <name>allContacts</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>ade6e8e7817ac9816177cf03605d28aff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNormalAccB</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>aacb4416ef2b0ed5ea94a06780cbc2949</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; sva::MotionVecd &gt; &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>a688993a906aa414994438534381cfcf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>aa024ff633008bda9eaf5a0e72ee31f3b</anchor>
      <arglist>(int robotIndex) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>QPSolver</name>
      <anchorfile>classtasks_1_1qp_1_1SolverData.html</anchorfile>
      <anchor>ab0c5d51bf80dcd62721abff05ce12961</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::SpringJoint</name>
    <filename>structtasks_1_1qp_1_1SpringJoint.html</filename>
    <member kind="function">
      <type></type>
      <name>SpringJoint</name>
      <anchorfile>structtasks_1_1qp_1_1SpringJoint.html</anchorfile>
      <anchor>ac25ad1f8efb3d7baa7c353a5e3f0aa89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringJoint</name>
      <anchorfile>structtasks_1_1qp_1_1SpringJoint.html</anchorfile>
      <anchor>aa9645391a0b018abb077090fd55ceb3d</anchor>
      <arglist>(const std::string &amp;jName, double K, double C, double O)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>structtasks_1_1qp_1_1SpringJoint.html</anchorfile>
      <anchor>a029b134a876b568f05bc4ad280a48a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>K</name>
      <anchorfile>structtasks_1_1qp_1_1SpringJoint.html</anchorfile>
      <anchor>a5466a16b77a204b340d93543a770cdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>structtasks_1_1qp_1_1SpringJoint.html</anchorfile>
      <anchor>a2b393d84a55fe348e6e5ce04deefd329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>O</name>
      <anchorfile>structtasks_1_1qp_1_1SpringJoint.html</anchorfile>
      <anchor>aa2bcaab07c4831dde713bbab4e360ade</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::MotionSpringConstr::SpringJointData</name>
    <filename>structtasks_1_1qp_1_1MotionSpringConstr_1_1SpringJointData.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structtasks_1_1qp_1_1MotionSpringConstr_1_1SpringJointData.html</anchorfile>
      <anchor>a7430c237c03d5a757c7cb76efb439ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>posInDof</name>
      <anchorfile>structtasks_1_1qp_1_1MotionSpringConstr_1_1SpringJointData.html</anchorfile>
      <anchor>a2b1d3b44560d4a25373da6ac735e3e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>K</name>
      <anchorfile>structtasks_1_1qp_1_1MotionSpringConstr_1_1SpringJointData.html</anchorfile>
      <anchor>aa00624e5a44c962fcdd3dc6b1009a32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>structtasks_1_1qp_1_1MotionSpringConstr_1_1SpringJointData.html</anchorfile>
      <anchor>a03378bf454ffd094f82b6b80b3b6bbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>O</name>
      <anchorfile>structtasks_1_1qp_1_1MotionSpringConstr_1_1SpringJointData.html</anchorfile>
      <anchor>a130d19b1b79cc5a3fea54d09d150e5b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SurfaceOrientationTask</name>
    <filename>classtasks_1_1qp_1_1SurfaceOrientationTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a7e42a72cae5786c4c40ecab3441c3b54</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a46c468d42d70acc880049ea545ebc2c6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type>tasks::SurfaceOrientationTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>aa5c981c373f19f76bd23e5c2fcff8cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a692bf859d8491cdfafe89ed4a76d243e</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>ab8e5a867717a9883a655016c5f1c8ad0</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a092d95bd2a9cce2e0dd205b5cdb17378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a201664b6468b79706ea3f5e626833bd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>aae99577a0b419e49c469e77c293b1bc2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>ae6ef81215b626684b7f2dd3dd22a90ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a020fd8ff9d1ba3162f6578f8906f0f32</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a03941e2ed80ade8acbd3a9173c06b1ba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a5e788410bd2f37b0f7622aa654064748</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::SurfaceOrientationTask</name>
    <filename>classtasks_1_1SurfaceOrientationTask.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>acc4cabcbaaef984c547bf06bfd0ecf11</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>adc8e70a684132754e18195c2c878e61a</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a96b6c6298e5e267d78049f479c4dae75</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>abdc29c495fda3699fbd6e9698d315be2</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>ac4dafb7783f95748eeeceec93cfb51d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>abbb14c2ef47665eefc63c560a5597859</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a79111bb3e3d585fb4dba52b9078ca68d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a677f46baeb823dcfb9e2a9789145c059</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a8c8d621a66e2f311d20e5702deda6f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a7c5393c5c8f26fef86260be042a1826b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a9ad18c9fbd4f512913166f5d6d5633b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>a02ee8042f9cf1f1492d66b5eba978406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>classtasks_1_1SurfaceOrientationTask.html</anchorfile>
      <anchor>abcc8e02981204c876662e99a21d396a5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SurfaceTransformTask</name>
    <filename>classtasks_1_1qp_1_1SurfaceTransformTask.html</filename>
    <base>TransformTaskCommon&lt; tasks::SurfaceTransformTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>SurfaceTransformTask</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceTransformTask.html</anchorfile>
      <anchor>ad080188983a173ad99bdbd63208eb189</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1SurfaceTransformTask.html</anchorfile>
      <anchor>a5c81d6e4c1eeb30c2866b789b3c79c40</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::SurfaceTransformTask</name>
    <filename>classtasks_1_1SurfaceTransformTask.html</filename>
    <base>tasks::TransformTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>SurfaceTransformTask</name>
      <anchorfile>classtasks_1_1SurfaceTransformTask.html</anchorfile>
      <anchor>a9ad5b122dfa8716abb481ed2e0679c6e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1SurfaceTransformTask.html</anchorfile>
      <anchor>a5bce03f4d99d2ba3a40254a54269a002</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMatTmp_</name>
      <anchorfile>classtasks_1_1SurfaceTransformTask.html</anchorfile>
      <anchor>af8655a5233d9b0d4f278b9f2fb1029fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TargetObjectiveTask</name>
    <filename>classtasks_1_1qp_1_1TargetObjectiveTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>TargetObjectiveTask</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a5281f1406a6d0aaf1ddfd2f7b876f62f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double timeStep, double duration, const Eigen::VectorXd &amp;objDot, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TargetObjectiveTask</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a6add2c0aea1ff74afa4382f37b54a90f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double timeStep, double duration, const Eigen::VectorXd &amp;objDot, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>af5a265f825501095eae8ef790e7bee3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duration</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>ac9ffebd223bc3d7874edbbe9dcd236ff</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iter</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a37b6237d74fe2cd1b313fb1d3a75a909</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iter</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a0bbd08184d765ede109a3bbf20b7daf7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrIter</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a2fbf426d55d3602a00a5a163c9223d36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nrIter</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>ad65e24a2d614fa7019099d2c163a4936</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>objDot</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>aef9d630839bff0d9ba82068d0665a8be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objDot</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>aa978730c9ba864753bc8d9ce1c765d6b</anchor>
      <arglist>(const Eigen::VectorXd &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>ab255abd5a9acbd68eb6ea1d57e49e4a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a9abf54174d6e8f3f5fc6d78694d3debd</anchor>
      <arglist>(const Eigen::VectorXd &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>phi</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>af5a0fa532e5559325ab9bfac7d20f209</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>psi</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a99cd48389025cd2a40673f4492834a49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>afd3fc3b8fc7faceece5aba0f031b7056</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a014efe64e1cd539a0dccb857008bf0d8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a3d19656c2352cd6eb9a496ffaa3cb9f8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a9e97fa73f8b9c1808688281f4534d126</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1TargetObjectiveTask.html</anchorfile>
      <anchor>a691902d9f7a4639575c3e9a47bc3253c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Task</name>
    <filename>classtasks_1_1qp_1_1Task.html</filename>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>a240a4829e60aa9f824d8145a46c9b004</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>ac477f102c9a66128557f4800bfb3bb43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>aa46b493ad3315c6fed56d294e387c2a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weight</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>a22f65e49796726052dd54f4a393b0566</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>a4fb40197774e65a243a371592fd48bbf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>a5c5aceb3acc9164a75c73e3051b06577</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>ae23731fb2968a088eab6a5298542437b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>a1e36e39ffffe29c088d90b1c67ca2137</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1Task.html</anchorfile>
      <anchor>a83cf452e29dc09f6f1190a950497e4de</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::TorqueBound</name>
    <filename>structtasks_1_1TorqueBound.html</filename>
    <member kind="function">
      <type></type>
      <name>TorqueBound</name>
      <anchorfile>structtasks_1_1TorqueBound.html</anchorfile>
      <anchor>a4e445b27e858692e0df90b0f4bf2d4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueBound</name>
      <anchorfile>structtasks_1_1TorqueBound.html</anchorfile>
      <anchor>ab77f06d82e34e6b2b877fe3c5215cd7d</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lTB, std::vector&lt; std::vector&lt; double &gt;&gt; uTB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lTorqueBound</name>
      <anchorfile>structtasks_1_1TorqueBound.html</anchorfile>
      <anchor>a72e03b00c59f045abad493697d45a6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uTorqueBound</name>
      <anchorfile>structtasks_1_1TorqueBound.html</anchorfile>
      <anchor>a3d06c4ad22a6fbce388e01ac4f14d6bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::TorqueDBound</name>
    <filename>structtasks_1_1TorqueDBound.html</filename>
    <member kind="function">
      <type></type>
      <name>TorqueDBound</name>
      <anchorfile>structtasks_1_1TorqueDBound.html</anchorfile>
      <anchor>a4df92ce77835c4e6e9233a514bbfe7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueDBound</name>
      <anchorfile>structtasks_1_1TorqueDBound.html</anchorfile>
      <anchor>a731f5942dae883b441a6e3ee358e69e4</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lTDB, std::vector&lt; std::vector&lt; double &gt;&gt; uTDB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lTorqueDBound</name>
      <anchorfile>structtasks_1_1TorqueDBound.html</anchorfile>
      <anchor>acfd2d1d38539f7238e2c5c95fb3e28e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uTorqueDBound</name>
      <anchorfile>structtasks_1_1TorqueDBound.html</anchorfile>
      <anchor>af9b512a8728bef21029d8c97806e1481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TorqueTask</name>
    <filename>classtasks_1_1qp_1_1TorqueTask.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a3163e17d2bdd6c0ae542cb28322a58e7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a27717972fc82e9dd7921b3d3e73cb2ed</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const Eigen::VectorXd &amp;jointSelect, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>ac011b1323c97601b29bcba56039f76f3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const std::string &amp;efName, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>ac4c52397472d4caea4354acff00445db</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const TorqueDBound &amp;tdb, double dt, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a34a1349b1986f959a420758066b7db07</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const TorqueDBound &amp;tdb, double dt, const Eigen::VectorXd &amp;jointSelect, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a3dde2c61b009bcde59666827370dbf9d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const TorqueDBound &amp;tdb, double dt, const std::string &amp;efName, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a1a6296b68fa7e55ee801a2bc36d56a18</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>aedf9dce201082afe90b6e8e0d1d1f7e8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a4e27ab32689eead0836fbca558d58a11</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a5d27471af0be353ba94406d308745946</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>ae0c39ec07b7d7be9c683b183200890cd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>jointSelect</name>
      <anchorfile>classtasks_1_1qp_1_1TorqueTask.html</anchorfile>
      <anchor>a31640e2cd95b4fd02a390f4eb6c10584</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TrackingTask</name>
    <filename>classtasks_1_1qp_1_1TrackingTask.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>TrackingTask</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>ae2c35b8f257be870f3bc00d4e003718e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrackingTask</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>ab4bf15311e7502060de127bcd48aaa11</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>adacea85596258631196cdc1dc5a50ae1</anchor>
      <arglist>(double gainPos, double gainVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorPos</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>a3239f7871cdab11b28e2f2e578e17912</anchor>
      <arglist>(const Eigen::VectorXd &amp;errorPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorVel</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>aa7e75dcb2e63cfa39b0fa49226d7a575</anchor>
      <arglist>(const Eigen::VectorXd &amp;errorVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>a20e5c060814329fd2aef628b3c439234</anchor>
      <arglist>(const Eigen::VectorXd &amp;refAccel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1TrackingTask.html</anchorfile>
      <anchor>a4f3c9c7072cd548599133bff6375043f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TrajectoryTask</name>
    <filename>classtasks_1_1qp_1_1TrajectoryTask.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>TrajectoryTask</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a59da3ed4a1c7e832ed3c0901f3733646</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTask</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>ac5defd525f27953454f9dde50ee3c45d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a80b3bb11ef78052992b837fe43b545eb</anchor>
      <arglist>(double gainPos, double gainVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a4227bab06fff7df1a7fb8ce833674f4c</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a287d5e7d528e025997f2f705c07a2d99</anchor>
      <arglist>(double gainPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a26e85c725c2a79a36ee79566ce1d226f</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>stiffness</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a4f9b57472b48aa7dcf6f4195ab087cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>aabcbb795c8bfe90f08b0b76406d68827</anchor>
      <arglist>(double gainVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a16c986b2e39068d42c8ab69d40276875</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>damping</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a03e54779a9786b6f10ccc728804f4141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>acb1ed22d8d4325d27016ba86d807b4f3</anchor>
      <arglist>(const Eigen::VectorXd &amp;refVel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>aec7efaccf50b43b6f45533ec9f11165e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>ab205f45b28c0df29e37c3906b4caa4c1</anchor>
      <arglist>(const Eigen::VectorXd &amp;refAccel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>a2d06c6d7b68bf201c4ee357d5e109f5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1TrajectoryTask.html</anchorfile>
      <anchor>ae0b4358be0d86c584536b4935b2811d7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TransformTask</name>
    <filename>classtasks_1_1qp_1_1TransformTask.html</filename>
    <base>TransformTaskCommon&lt; tasks::TransformTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>TransformTask</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTask.html</anchorfile>
      <anchor>aeb57ca8a78852a55a16881a3c170b7c5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity(), const Eigen::Matrix3d &amp;E_0_c=Eigen::Matrix3d::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>E_0_c</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTask.html</anchorfile>
      <anchor>ae260b35ffe9afa1c939261a76a219982</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E_0_c)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>E_0_c</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTask.html</anchorfile>
      <anchor>a5f6bd5a0921c99d1d58a41f9eb7aeaa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTask.html</anchorfile>
      <anchor>ac8882b864bde44ffa1fc142373fc85ce</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::TransformTask</name>
    <filename>classtasks_1_1TransformTask.html</filename>
    <base>tasks::TransformTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>TransformTask</name>
      <anchorfile>classtasks_1_1TransformTask.html</anchorfile>
      <anchor>a47ef3ff9e94d1c029843cf2e8efd0e03</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity(), const Eigen::Matrix3d &amp;E_0_c=Eigen::Matrix3d::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>E_0_c</name>
      <anchorfile>classtasks_1_1TransformTask.html</anchorfile>
      <anchor>af28399b8910027ff33d9230fdf5611b8</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E_0_c)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>E_0_c</name>
      <anchorfile>classtasks_1_1TransformTask.html</anchorfile>
      <anchor>a32dbd2552c66dadac00b86152e53f4f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1TransformTask.html</anchorfile>
      <anchor>a2cdf770b2c150f752ff44c9a049f31b2</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::TransformTaskCommon</name>
    <filename>classtasks_1_1TransformTaskCommon.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a480794408729e99dea19ae53fa51fa2a</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a075f661f10fb49cfaed9a2694b6763d3</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ac9ac6b420170421f8658a53ffa81d798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a9c6b4586c641fa3a22ce68ebe9f76d36</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ae3014f0561c11ea6f3f9817a0e4c3743</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ade170cd4493f4cc124e7dbe0510bb767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad409e493570f60565535050f9c70a9b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ac64f7fd93e4853da6629f403eba46fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>adf5b5e49e0851fd720e33b1760e0e5c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_0_t_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a65b337e6e48ec7e93b8137364374752f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_b_p_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>af3c5c7d4e3e282c76d28c09563e6650d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bodyIndex_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a298e38439bbefa80e02f53ffbda17771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a5dd5ce12eb9762527a8d6933b1b23e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>eval_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a1f71e9037d4cd93cc297e0c0b54c0d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>speed_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>aa9faadfe66b2d0903cc393756277abe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>normalAcc_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a81993fa44af379d32b94a6c3388390af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMat_</name>
      <anchorfile>classtasks_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ae6fc32df4b5ed9cf52e94a95db598708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TransformTaskCommon</name>
    <filename>classtasks_1_1qp_1_1TransformTaskCommon.html</filename>
    <templarg>transform_task_t</templarg>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad80e311e700791109d84fa22c954cb84</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>transform_task_t &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a14760ffdbe08973b70e3d2eea0e6aa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>af0b3178505a2872ceb38462bcce08f29</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a02be60958c010b9af3d382849af1f607</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a7a50df788c61e0303e09ead4409eddfb</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a412b4126b09d58eb01ad5383cabf45ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad3254048c52d4893b3fcda182cb33c86</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ab64f671f0e2f1f250a73ac60e48517b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a391f4f064c886f53ccc7fbce982f20bb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a52d9b1affad4c2c731a2d4a3e0a76ee2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a1a2a0bc0a9f08f14d5b338327c8b2291</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>transform_task_t</type>
      <name>tt_</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a20b38faf7c45ad433e793b5bf375f61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a55c311d3cda616f83de11d836c6f3d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransformTaskCommon&lt; tasks::SurfaceTransformTask &gt;</name>
    <filename>classtasks_1_1qp_1_1TransformTaskCommon.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad80e311e700791109d84fa22c954cb84</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>tasks::SurfaceTransformTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a14760ffdbe08973b70e3d2eea0e6aa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>af0b3178505a2872ceb38462bcce08f29</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a02be60958c010b9af3d382849af1f607</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a7a50df788c61e0303e09ead4409eddfb</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a412b4126b09d58eb01ad5383cabf45ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad3254048c52d4893b3fcda182cb33c86</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ab64f671f0e2f1f250a73ac60e48517b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a391f4f064c886f53ccc7fbce982f20bb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a52d9b1affad4c2c731a2d4a3e0a76ee2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a1a2a0bc0a9f08f14d5b338327c8b2291</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::SurfaceTransformTask</type>
      <name>tt_</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a20b38faf7c45ad433e793b5bf375f61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a55c311d3cda616f83de11d836c6f3d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransformTaskCommon&lt; tasks::TransformTask &gt;</name>
    <filename>classtasks_1_1qp_1_1TransformTaskCommon.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad80e311e700791109d84fa22c954cb84</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>tasks::TransformTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a14760ffdbe08973b70e3d2eea0e6aa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>af0b3178505a2872ceb38462bcce08f29</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a02be60958c010b9af3d382849af1f607</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a7a50df788c61e0303e09ead4409eddfb</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a412b4126b09d58eb01ad5383cabf45ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ad3254048c52d4893b3fcda182cb33c86</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>ab64f671f0e2f1f250a73ac60e48517b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a391f4f064c886f53ccc7fbce982f20bb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a52d9b1affad4c2c731a2d4a3e0a76ee2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a1a2a0bc0a9f08f14d5b338327c8b2291</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::TransformTask</type>
      <name>tt_</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a20b38faf7c45ad433e793b5bf375f61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>classtasks_1_1qp_1_1TransformTaskCommon.html</anchorfile>
      <anchor>a55c311d3cda616f83de11d836c6f3d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::UnilateralContact</name>
    <filename>structtasks_1_1qp_1_1UnilateralContact.html</filename>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a0f7a6e457279bef9aa1113d13b8a8b56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a4975439de18ef4c88fc9c491f6e5164f</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, std::vector&lt; Eigen::Vector3d &gt; r1Points, const Eigen::Matrix3d &amp;r1Frame, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a7d67ff07f42cac5b82fb035f99788afc</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, int ambId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const Eigen::Matrix3d &amp;r1Frame, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a15966f21610db65d96b0cdb2153e8f9c</anchor>
      <arglist>(const ContactId &amp;cId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const Eigen::Matrix3d &amp;r1Frame, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a32db8b271ef93254c119bcbb5dedbeb0</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int p, const FrictionCone &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a3436d04338e44d568d26d7bf6a106606</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const FrictionCone &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>force</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a3f0e3e02325ebc16def152fa24a0d36d</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const FrictionCone &amp;c_pi_b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a8f5ffe0ae814758ef388ca2af8fac0cd</anchor>
      <arglist>(int point) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a791c108e90a20051703ee0d1a2cc1ca6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a6c5b0d74bcaf2d0909e5d19e62860d71</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int point, const FrictionCone &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>ad6f107d4ee8e0befa608b59d3725f014</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const FrictionCone &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sForce</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>ac3f1784551ec2a59a576104e160f652a</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const FrictionCone &amp;c_pi_b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sNrLambda</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a1277ad7e9b253aef2017fdceca7082e7</anchor>
      <arglist>(int point) const</arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>contactId</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a270f82eb683458249b864a73d3464021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r1Points</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>af7e3cbf6139f5f5b34dc5cc36e7ee9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r2Points</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a3ffa099f15791cc4efddb0f2bcea16b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrictionCone</type>
      <name>r1Cone</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a3e166b10c87bccb10ff5b22559171623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrictionCone</type>
      <name>r2Cone</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a73df9714f72365e74a0682317107b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>a71abdba5f0d1df7cc91636b4385ee6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>structtasks_1_1qp_1_1UnilateralContact.html</anchorfile>
      <anchor>aaa6507cf6e0d5cfcfdf1c6b3d5df6ca5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::VectorOrientationTask</name>
    <filename>classtasks_1_1VectorOrientationTask.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a915b78ec72edfd554234c61c883dc99b</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a0f73567b135c586035253002b91fa65f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyVector</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a0122d38e08243f8d504435e793fd0088</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyVector</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a14bf0b01a13e432d12dcdd51cc7b28fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ac9688f4adf664318c90a22c3a82353a8</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ad5a76850a02d10165fad43b93e1cd612</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>accb094e11c1b3e50ae11043cad72646d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a2e7206a4e62167c039c50717eff8c6b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a2ac9e1a39dac7cf02bdac3727a9f980a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>adce16f613b8c59d586d995bb9e0d4da5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ac9144d9c534c55f126404bd78b876683</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::VectorOrientationTask</name>
    <filename>classtasks_1_1qp_1_1VectorOrientationTask.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>aa9d49889bd49416cbf821f8ee7607eca</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetVector)</arglist>
    </member>
    <member kind="function">
      <type>tasks::VectorOrientationTask &amp;</type>
      <name>task</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ac91165ba88b511181eabd515fb813c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyVector</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a5f917e9e709ebe8dc6a6d4e0837c20a2</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyVector</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ac9c7e483e2ad9336d8f022121e686233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a8cf2cae94d6f8db4c231927b0db6bfd5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a75038890ab72a1d83e3298d55b312b40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>aa6afe7be00b8933fab39dca0433c6ee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ac22cc9ca1841e86405910df138d9003a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>aaa28325bddf2f915dfe0b43d43cf984b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>af1de9be03ce67a0bf3fcabe704d8aed1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a60c31be321774f98d8b0c7ad92627d38</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>aed154364cc0cf34fc55d69f23dc2fed6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>classtasks_1_1qp_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a9ba984ed9f42fae7c283f0dcca2d634b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rbd</name>
    <filename>namespacerbd.html</filename>
  </compound>
  <compound kind="namespace">
    <name>sch</name>
    <filename>namespacesch.html</filename>
  </compound>
  <compound kind="namespace">
    <name>tasks</name>
    <filename>namespacetasks.html</filename>
    <namespace>tasks::qp</namespace>
    <class kind="struct">tasks::AlphaBound</class>
    <class kind="struct">tasks::AlphaDBound</class>
    <class kind="struct">tasks::AlphaDDBound</class>
    <class kind="class">tasks::CoMTask</class>
    <class kind="class">tasks::GazeTask</class>
    <class kind="class">tasks::LinVelocityTask</class>
    <class kind="class">tasks::MomentumTask</class>
    <class kind="class">tasks::MultiCoMTask</class>
    <class kind="class">tasks::MultiRobotTransformTask</class>
    <class kind="class">tasks::OrientationTask</class>
    <class kind="class">tasks::OrientationTrackingTask</class>
    <class kind="struct">tasks::PolyTorqueBound</class>
    <class kind="class">tasks::PositionBasedVisServoTask</class>
    <class kind="class">tasks::PositionTask</class>
    <class kind="class">tasks::PostureTask</class>
    <class kind="struct">tasks::QBound</class>
    <class kind="class">tasks::RelativeDistTask</class>
    <class kind="class">tasks::SurfaceOrientationTask</class>
    <class kind="class">tasks::SurfaceTransformTask</class>
    <class kind="struct">tasks::TorqueBound</class>
    <class kind="struct">tasks::TorqueDBound</class>
    <class kind="class">tasks::TransformTask</class>
    <class kind="class">tasks::TransformTaskCommon</class>
    <class kind="class">tasks::VectorOrientationTask</class>
  </compound>
  <compound kind="namespace">
    <name>tasks::qp</name>
    <filename>namespacetasks_1_1qp.html</filename>
    <class kind="struct">tasks::qp::BilateralContact</class>
    <class kind="class">tasks::qp::Bound</class>
    <class kind="class">tasks::qp::BoundedSpeedConstr</class>
    <class kind="class">tasks::qp::CollisionConstr</class>
    <class kind="class">tasks::qp::CoMIncPlaneConstr</class>
    <class kind="class">tasks::qp::CoMTask</class>
    <class kind="struct">tasks::qp::constr_traits</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Equality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; GenInequality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Inequality &gt;</class>
    <class kind="class">tasks::qp::Constraint</class>
    <class kind="class">tasks::qp::ConstraintFunction</class>
    <class kind="class">tasks::qp::ContactAccConstr</class>
    <class kind="class">tasks::qp::ContactConstr</class>
    <class kind="class">tasks::qp::ContactConstrCommon</class>
    <class kind="struct">tasks::qp::ContactId</class>
    <class kind="class">tasks::qp::ContactPosConstr</class>
    <class kind="class">tasks::qp::ContactSpeedConstr</class>
    <class kind="class">tasks::qp::ContactTask</class>
    <class kind="class">tasks::qp::DamperJointLimitsConstr</class>
    <class kind="class">tasks::qp::Equality</class>
    <class kind="struct">tasks::qp::FrictionCone</class>
    <class kind="class">tasks::qp::GazeTask</class>
    <class kind="class">tasks::qp::GenInequality</class>
    <class kind="class">tasks::qp::GenQPSolver</class>
    <class kind="class">tasks::qp::GripperTorqueConstr</class>
    <class kind="class">tasks::qp::GripperTorqueTask</class>
    <class kind="class">tasks::qp::HighLevelTask</class>
    <class kind="class">tasks::qp::ImageConstr</class>
    <class kind="class">tasks::qp::Inequality</class>
    <class kind="struct">tasks::qp::JointGains</class>
    <class kind="class">tasks::qp::JointLimitsConstr</class>
    <class kind="class">tasks::qp::JointsSelector</class>
    <class kind="struct">tasks::qp::JointStiffness</class>
    <class kind="class">tasks::qp::LinVelocityTask</class>
    <class kind="class">tasks::qp::LSSOLQPSolver</class>
    <class kind="class">tasks::qp::MomentumTask</class>
    <class kind="class">tasks::qp::MotionConstr</class>
    <class kind="class">tasks::qp::MotionConstrCommon</class>
    <class kind="class">tasks::qp::MotionPolyConstr</class>
    <class kind="class">tasks::qp::MotionSpringConstr</class>
    <class kind="class">tasks::qp::MultiCoMTask</class>
    <class kind="class">tasks::qp::MultiRobotTransformTask</class>
    <class kind="class">tasks::qp::OrientationTask</class>
    <class kind="class">tasks::qp::OrientationTrackingTask</class>
    <class kind="class">tasks::qp::PIDTask</class>
    <class kind="class">tasks::qp::PositionBasedVisServoTask</class>
    <class kind="class">tasks::qp::PositionTask</class>
    <class kind="class">tasks::qp::PositiveLambda</class>
    <class kind="class">tasks::qp::PostureTask</class>
    <class kind="class">tasks::qp::QLDQPSolver</class>
    <class kind="class">tasks::qp::QPSolver</class>
    <class kind="class">tasks::qp::RelativeDistTask</class>
    <class kind="class">tasks::qp::SetPointTask</class>
    <class kind="class">tasks::qp::SetPointTaskCommon</class>
    <class kind="class">tasks::qp::SolverData</class>
    <class kind="struct">tasks::qp::SpringJoint</class>
    <class kind="class">tasks::qp::SurfaceOrientationTask</class>
    <class kind="class">tasks::qp::SurfaceTransformTask</class>
    <class kind="class">tasks::qp::TargetObjectiveTask</class>
    <class kind="class">tasks::qp::Task</class>
    <class kind="class">tasks::qp::TorqueTask</class>
    <class kind="class">tasks::qp::TrackingTask</class>
    <class kind="class">tasks::qp::TrajectoryTask</class>
    <class kind="class">tasks::qp::TransformTask</class>
    <class kind="class">tasks::qp::TransformTaskCommon</class>
    <class kind="struct">tasks::qp::UnilateralContact</class>
    <class kind="class">tasks::qp::VectorOrientationTask</class>
    <member kind="function">
      <type>void</type>
      <name>fillQC</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a19005ec649deff2408ae41bd0ac73972</anchor>
      <arglist>(const std::vector&lt; Task *&gt; &amp;tasks, int nrVars, Eigen::MatrixXd &amp;Q, Eigen::VectorXd &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceQC</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a6ad2cb7bd904212e5d9b6dcfaa989f94</anchor>
      <arglist>(const Eigen::MatrixXd &amp;QFull, const Eigen::VectorXd &amp;CFull, Eigen::MatrixXd &amp;Q, Eigen::VectorXd &amp;C, const Eigen::MatrixXd &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>aef4304bc755850350a21adc6250789a4</anchor>
      <arglist>(const std::vector&lt; Equality *&gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a75ff83cd1b1004838311866eda859393</anchor>
      <arglist>(const std::vector&lt; Inequality *&gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a0ebca234bbf747cb3780799a89d195fc</anchor>
      <arglist>(const std::vector&lt; GenInequality *&gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a1db07134f231c8aacf6c2bf2f401639d</anchor>
      <arglist>(const std::vector&lt; Equality *&gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a01ded3311635f6d7af39e15d1659f7b9</anchor>
      <arglist>(const std::vector&lt; Inequality *&gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a7d5e57614fe485d3e3c82d4edc26dbc0</anchor>
      <arglist>(const std::vector&lt; GenInequality *&gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBound</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a49a76dde5839eb89ded3ad069f46f38e</anchor>
      <arglist>(const std::vector&lt; Bound *&gt; &amp;bounds, Eigen::VectorXd &amp;XL, Eigen::VectorXd &amp;XU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceA</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>ac5c44bc95450bbbc88c5b1af5d3d851d</anchor>
      <arglist>(const Eigen::MatrixXd &amp;AFull, Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceBound</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a741de9b14e9fe6a5b4ec675703215210</anchor>
      <arglist>(const Eigen::VectorXd &amp;XLFull, Eigen::VectorXd &amp;XL, const Eigen::VectorXd &amp;XUFull, Eigen::VectorXd &amp;XU, const std::vector&lt; int &gt; &amp;fullToReduced, const std::vector&lt; int &gt; &amp;reducedToFull, const std::vector&lt; std::tuple&lt; int, int, double &gt;&gt; &amp;dependencies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandResult</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a9ce2d39b71ff7cc28fd53ce83444803f</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Eigen::VectorXd &amp;resultFull, const Eigen::MatrixXd &amp;multipliers)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a65d9ff284da05686474a0fb01276bbce</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, T *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a9694a15e3e5b744843aa6dae4fa134da</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Equality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>abda68512c902b700787e7eea478cd71a</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Inequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a92dd7d7ce7ea80e3cf096e82061d0b66</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, GenInequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>constrErrorMsg</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a35f47a0707e1b0bd512e16bcc7fdd235</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const Eigen::VectorXd &amp;result, int ALine, const std::vector&lt; T *&gt; &amp;constr, int &amp;start, int &amp;end, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TASKS_DLLAPI GenQPSolver *</type>
      <name>createQPSolver</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>aada2800b4fa88d085376a20b1105b87e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>TASKS_DLLAPI sch::Matrix4x4</type>
      <name>tosch</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a2887fd65f669f54a2aaaa911c724a089</anchor>
      <arglist>(const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findJointFromVector</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>ac4a39f2423f38a93bb34cd5d0dba891c</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, int line, bool withBase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareDof</name>
      <anchorfile>namespacetasks_1_1qp.html</anchorfile>
      <anchor>a9d2ad288554eb8df94fadd7bfc77009d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb1, const rbd::MultiBody &amp;mb2)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Tasks</title>
    <filename>index</filename>
  </compound>
</tagfile>
